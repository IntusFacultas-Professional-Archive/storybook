import { NButton as e } from "@intus/button";
import { NLabel as t } from "@intus/typography";
import r from "@intus/badge";
import n from "vue-styled-components";
import o from "@intus/select-me";
import i from "@intus/design-system";
const a = n.div`
  width: 100%;
`,
  l = {
    flavor: String,
    disabled: Boolean,
    active: Boolean,
    defaultTheme: {
      type: Object,
      default: function() {
        return i;
      }
    }
  },
  s = n("div", l)`
  background-image: linear-gradient(
    to top right,
    transparent 50%,
    ${e =>
      e.disabled
        ? "rgba(0, 0, 0, 0.3)"
        : e.theme && e.theme[e.flavor]
        ? e.theme[e.flavor].color.color
        : e.defaultTheme[e.flavor]
        ? e.defaultTheme[e.flavor].color.color
        : "#222"}
      50%
  );
  float: right;
  width: 0.5rem;
  height: 0.5rem;
  transform: rotate(45deg);
  transition: 0.3s all;
  display: inline-block;
`,
  c = n.div`
  width: 100%;
  display: flex;
  flex-direction: column;
  margin-bottom: 5px;
`,
  p = n("div", l)`
  font-family: "Open Sans Regular", -apple-system, BlinkMacSystemFont,
    "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji",
    "Segoe UI Emoji", "Segoe UI Symbol";
  padding: 5px;
  margin-bottom: 2px;
  cursor: pointer;
  text-align: left !important;
  color: ${e =>
    e.theme && e.theme[e.flavor]
      ? e.theme[e.flavor].color.color
      : e.defaultTheme[e.flavor] && e.defaultTheme[e.flavor].color.color
      ? e.defaultTheme[e.flavor].color.color
      : "#040404"}
  background-color: ${e =>
    e.theme && e.theme[e.flavor]
      ? e.theme[e.flavor].background.color
      : e.defaultTheme[e.flavor] && e.defaultTheme[e.flavor].background.color
      ? e.defaultTheme[e.flavor].background.color
      : "#f0f0f0"};
  &:hover {
    background-color: ${e =>
      e.theme && e.theme[e.flavor]
        ? e.theme[e.flavor].background.hover
        : e.defaultTheme[e.flavor] && e.defaultTheme[e.flavor].background.hover
        ? e.defaultTheme[e.flavor].background.hover
        : "#d5d5d5"};
    color: ${e =>
      e.theme && e.theme[e.flavor]
        ? e.theme[e.flavor].color.hover
        : e.defaultTheme[e.flavor] && e.defaultTheme[e.flavor].color.hover
        ? e.defaultTheme[e.flavor].color.hover
        : "#000"}
  }
`,
  d = {
    components: {
      NButton: e,
      ParametricContainer: a,
      ParametricCarat: s,
      SelectMe: o,
      ParametricContentContainer: n.div`
  transition: 0.3s height;
  margin-top: 3px;
  height: 0px;
  overflow-y: hidden;
`,
      QuickSelectContainer: c,
      QuickSelectOption: p,
      Badge: r,
      NLabel: t
    },
    data: () => ({ selectedItems: [], open: !1, unwatch: null }),
    props: {
      value: { type: String, default: () => [] },
      name: { type: String, required: !0 },
      filter: { type: Object, required: !0 },
      defaultOpen: { type: Boolean, default: !1 },
      displayAttribute: { type: String, default: "text" },
      valueAttribute: { type: String, default: "value" },
      quickSelectFlavor: { type: String, default: "Secondary" },
      activeBadgeFlavor: { type: String, default: "Light" },
      badgeFlavor: { type: String, default: "Secondary" },
      flavor: { type: String, default: "Dark" },
      debug: { type: Boolean, default: !1 }
    },
    beforeDestroy() {
      this.unwatch();
    },
    mounted() {
      (this.open = this.defaultOpen),
        this.defaultOpen && this.expandSection(this.$refs.content.$el),
        this.filter.selected_values &&
          (this.selectedItems = this.filter.selected_values.slice()),
        (this.unwatch = this.$watch("values", this.updateSelectedItems, {
          deep: !0
        }));
    },
    methods: {
      updateSelectedItems() {
        this.selectedItems = this.value;
      },
      collapseSection(e) {
        let t = e.scrollHeight;
        var r = e.style.transition;
        (e.style.transition = ""),
          (e.style.height = t + "px !important"),
          (e.style.overflowY = "hidden"),
          requestAnimationFrame(function() {
            (e.style.height = t + "px"),
              (e.style.transition = r),
              requestAnimationFrame(function() {
                (e.style.height = "0px"), (e.style.paddingBottom = "0px");
              });
          }),
          e.setAttribute("data-collapsed", "true");
      },
      expandSection(e) {
        let t = e.scrollHeight;
        (e.style.height = t + "px"),
          (e.style.paddingBottom = "5px"),
          e.addEventListener("transitionend", function() {
            e.removeEventListener("transitionend", this),
              "false" == e.getAttribute("data-collapsed") &&
                ((e.style.height = "auto"), (e.style.overflowY = "visible"));
          }),
          e.setAttribute("data-collapsed", "false");
      },
      handleUpdate(e) {
        (this.selectedItems = e.slice()),
          this.$emit("input", this.selectedItems);
      },
      toggle() {
        this.open
          ? (this.collapseSection(this.$refs.content.$el), (this.open = !1))
          : (this.expandSection(this.$refs.content.$el), (this.open = !0));
      },
      quickSelect(e) {
        let t = this.filter.items.filter(
          t => t[this.valueAttribute] == e[this.valueAttribute]
        )[0];
        this.$refs.selectBar && this.$refs.selectBar.selectOption(t);
      }
    },
    computed: {
      computeClass() {
        return this.open ? ["sidebar-open-carat"] : [];
      }
    }
  };
const m =
  "undefined" != typeof navigator &&
  /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
let u;
const h = {};
const f = d;
var v = function() {
  var e = this,
    t = e.$createElement,
    r = e._self._c || t;
  return r(
    "parametric-container",
    [
      r(
        "n-button",
        {
          staticClass: "parametric-button",
          attrs: { block: !0, flavor: e.flavor },
          on: { click: e.toggle }
        },
        [
          r(
            "span",
            [
              e._v("\n      " + e._s(e.filter.display) + "\n      "),
              0 != e.selectedItems.length
                ? r("badge", { attrs: { flavor: e.activeBadgeFlavor } }, [
                    e._v("Active")
                  ])
                : e._e()
            ],
            1
          ),
          e._v(" "),
          r("parametric-carat", {
            class: e.computeClass,
            attrs: { flavor: e.flavor, disabled: e.filter.disabled }
          })
        ],
        1
      ),
      e._v(" "),
      r(
        "parametric-content-container",
        { ref: "content" },
        [
          r("n-label", { staticClass: "sr-only", attrs: { for: e.name } }, [
            e._v(e._s(e.filter.display))
          ]),
          e._v(" "),
          r("select-me", {
            ref: "selectBar",
            attrs: {
              "aria-label": e.filter.display,
              options: e.filter.items,
              "badge-flavor": e.badgeFlavor,
              "multi-select": !0,
              debug: e.debug,
              "display-attribute": e.displayAttribute,
              "value-attribute": e.valueAttribute,
              name: e.name
            },
            on: {
              input: e.handleUpdate,
              focus: function(t) {
                e.open = !0;
              }
            },
            model: {
              value: e.selectedItems,
              callback: function(t) {
                e.selectedItems = t;
              },
              expression: "selectedItems"
            }
          }),
          e._v(" "),
          r(
            "quick-select-container",
            e._l(e.filter.quickSelects, function(t, n) {
              return r("quick-select-option", {
                key: n,
                attrs: { flavor: e.quickSelectFlavor },
                domProps: { innerHTML: e._s(t[e.displayAttribute]) },
                on: {
                  click: function(r) {
                    return e.quickSelect(t);
                  }
                }
              });
            }),
            1
          )
        ],
        1
      )
    ],
    1
  );
};
v._withStripped = !0;
const g = (function(e, t, r, n, o, i, a, l, s, c) {
    "boolean" != typeof a && ((s = l), (l = a), (a = !1));
    const p = "function" == typeof r ? r.options : r;
    let d;
    if (
      (e &&
        e.render &&
        ((p.render = e.render),
        (p.staticRenderFns = e.staticRenderFns),
        (p._compiled = !0),
        o && (p.functional = !0)),
      n && (p._scopeId = n),
      i
        ? ((d = function(e) {
            (e =
              e ||
              (this.$vnode && this.$vnode.ssrContext) ||
              (this.parent &&
                this.parent.$vnode &&
                this.parent.$vnode.ssrContext)) ||
              "undefined" == typeof __VUE_SSR_CONTEXT__ ||
              (e = __VUE_SSR_CONTEXT__),
              t && t.call(this, s(e)),
              e && e._registeredComponents && e._registeredComponents.add(i);
          }),
          (p._ssrRegister = d))
        : t &&
          (d = a
            ? function(e) {
                t.call(this, c(e, this.$root.$options.shadowRoot));
              }
            : function(e) {
                t.call(this, l(e));
              }),
      d)
    )
      if (p.functional) {
        const e = p.render;
        p.render = function(t, r) {
          return d.call(r), e(t, r);
        };
      } else {
        const e = p.beforeCreate;
        p.beforeCreate = e ? [].concat(e, d) : [d];
      }
    return r;
  })(
    { render: v, staticRenderFns: [] },
    function(e) {
      e &&
        e("data-v-3b6853c4_0", {
          source:
            "\n.sr-only {\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  white-space: nowrap;\r\n  -webkit-clip-path: inset(50%);\r\n  clip-path: inset(50%);\r\n  border: 0;\n}\n.parametric-button {\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\n}\n.parametric-open-carat {\r\n  transform: rotate(135deg) !important;\n}\r\n",
          map: {
            version: 3,
            sources: [
              "C:\\Users\\pedro\\Documents\\Work\\Storybook\\src\\components\\Storefront\\ParametricFilter\\src\\ParametricFilter.vue"
            ],
            names: [],
            mappings:
              ";AAiUA;EACA,kBAAA;EACA,UAAA;EACA,WAAA;EACA,UAAA;EACA,gBAAA;EACA,sBAAA;EACA,mBAAA;EACA,6BAAA;EACA,qBAAA;EACA,SAAA;AACA;AACA;EACA,8BAAA;EACA,aAAA;EACA,mBAAA;AACA;AACA;EACA,oCAAA;AACA",
            file: "ParametricFilter.vue",
            sourcesContent: [
              '<template>\r\n  <parametric-container>\r\n    <n-button\r\n      :block="true"\r\n      :flavor="flavor"\r\n      @click="toggle"\r\n      class="parametric-button"\r\n    >\r\n      <span>\r\n        {{ filter.display }}\r\n        <badge :flavor="activeBadgeFlavor" v-if="selectedItems.length != 0"\r\n          >Active</badge\r\n        >\r\n      </span>\r\n      <parametric-carat\r\n        :flavor="flavor"\r\n        :class="computeClass"\r\n        :disabled="filter.disabled"\r\n      ></parametric-carat>\r\n    </n-button>\r\n    <parametric-content-container ref="content">\r\n      <n-label class="sr-only" :for="name">{{ filter.display }}</n-label>\r\n      <select-me\r\n        :aria-label="filter.display"\r\n        v-model="selectedItems"\r\n        :options="filter.items"\r\n        :badge-flavor="badgeFlavor"\r\n        :multi-select="true"\r\n        :debug="debug"\r\n        :display-attribute="displayAttribute"\r\n        :value-attribute="valueAttribute"\r\n        :name="name"\r\n        ref="selectBar"\r\n        @input="handleUpdate"\r\n        @focus="open = true"\r\n      ></select-me>\r\n      <quick-select-container>\r\n        <quick-select-option\r\n          v-for="(item, index) in filter.quickSelects"\r\n          :flavor="quickSelectFlavor"\r\n          :key="index"\r\n          v-html="item[displayAttribute]"\r\n          @click="quickSelect(item)"\r\n        ></quick-select-option>\r\n      </quick-select-container>\r\n    </parametric-content-container>\r\n  </parametric-container>\r\n</template>\r\n\r\n<script>\r\nimport { NButton } from "@intus/button";\r\nimport { NLabel } from "@intus/typography";\r\nimport Badge from "@intus/badge";\r\nimport styled from "vue-styled-components";\r\nimport SelectMe from "@intus/select-me";\r\nimport Theme from "@intus/design-system";\r\nconst ParametricContainer = styled.div`\r\n  width: 100%;\r\n`;\r\nconst props = {\r\n  flavor: String,\r\n  disabled: Boolean,\r\n  active: Boolean,\r\n  defaultTheme: {\r\n    type: Object,\r\n    default: function() {\r\n      return Theme;\r\n    }\r\n  }\r\n};\r\nconst ParametricCarat = styled("div", props)`\r\n  background-image: linear-gradient(\r\n    to top right,\r\n    transparent 50%,\r\n    ${props =>\r\n        props.disabled\r\n          ? "rgba(0, 0, 0, 0.3)"\r\n          : props.theme && props.theme[props.flavor]\r\n          ? props.theme[props.flavor].color.color\r\n          : props.defaultTheme[props.flavor]\r\n          ? props.defaultTheme[props.flavor].color.color\r\n          : "#222"}\r\n      50%\r\n  );\r\n  float: right;\r\n  width: 0.5rem;\r\n  height: 0.5rem;\r\n  transform: rotate(45deg);\r\n  transition: 0.3s all;\r\n  display: inline-block;\r\n`;\r\nconst QuickSelectContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 5px;\r\n`;\r\nconst QuickSelectOption = styled("div", props)`\r\n  font-family: "Open Sans Regular", -apple-system, BlinkMacSystemFont,\r\n    "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji",\r\n    "Segoe UI Emoji", "Segoe UI Symbol";\r\n  padding: 5px;\r\n  margin-bottom: 2px;\r\n  cursor: pointer;\r\n  text-align: left !important;\r\n  color: ${props =>\r\n    props.theme && props.theme[props.flavor]\r\n      ? props.theme[props.flavor].color.color\r\n      : props.defaultTheme[props.flavor] &&\r\n        props.defaultTheme[props.flavor].color.color\r\n      ? props.defaultTheme[props.flavor].color.color\r\n      : "#040404"}\r\n  background-color: ${props =>\r\n    props.theme && props.theme[props.flavor]\r\n      ? props.theme[props.flavor].background.color\r\n      : props.defaultTheme[props.flavor] &&\r\n        props.defaultTheme[props.flavor].background.color\r\n      ? props.defaultTheme[props.flavor].background.color\r\n      : "#f0f0f0"};\r\n  &:hover {\r\n    background-color: ${props =>\r\n      props.theme && props.theme[props.flavor]\r\n        ? props.theme[props.flavor].background.hover\r\n        : props.defaultTheme[props.flavor] &&\r\n          props.defaultTheme[props.flavor].background.hover\r\n        ? props.defaultTheme[props.flavor].background.hover\r\n        : "#d5d5d5"};\r\n    color: ${props =>\r\n      props.theme && props.theme[props.flavor]\r\n        ? props.theme[props.flavor].color.hover\r\n        : props.defaultTheme[props.flavor] &&\r\n          props.defaultTheme[props.flavor].color.hover\r\n        ? props.defaultTheme[props.flavor].color.hover\r\n        : "#000"}\r\n  }\r\n`;\r\nconst ParametricContentContainer = styled.div`\r\n  transition: 0.3s height;\r\n  margin-top: 3px;\r\n  height: 0px;\r\n  overflow-y: hidden;\r\n`;\r\nexport const ParametricFilter = {\r\n  components: {\r\n    NButton,\r\n    ParametricContainer,\r\n    ParametricCarat,\r\n    SelectMe,\r\n    ParametricContentContainer,\r\n    QuickSelectContainer,\r\n    QuickSelectOption,\r\n    Badge,\r\n    NLabel\r\n  },\r\n  data() {\r\n    return {\r\n      selectedItems: [],\r\n      open: false,\r\n      unwatch: null\r\n    };\r\n  },\r\n  props: {\r\n    value: {\r\n      type: String,\r\n      default() {\r\n        return [];\r\n      }\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    filter: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    defaultOpen: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    displayAttribute: {\r\n      type: String,\r\n      default: "text"\r\n    },\r\n    valueAttribute: {\r\n      type: String,\r\n      default: "value"\r\n    },\r\n    quickSelectFlavor: {\r\n      type: String,\r\n      default: "Secondary"\r\n    },\r\n    activeBadgeFlavor: {\r\n      type: String,\r\n      default: "Light"\r\n    },\r\n    badgeFlavor: {\r\n      type: String,\r\n      default: "Secondary"\r\n    },\r\n    flavor: {\r\n      type: String,\r\n      default: "Dark"\r\n    },\r\n    debug: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    this.unwatch();\r\n  },\r\n  mounted() {\r\n    this.open = this.defaultOpen;\r\n    if (this.defaultOpen) {\r\n      this.expandSection(this.$refs.content.$el);\r\n    }\r\n    if (this.filter.selected_values) {\r\n      this.selectedItems = this.filter.selected_values.slice();\r\n    }\r\n    this.unwatch = this.$watch("values", this.updateSelectedItems, {\r\n      deep: true\r\n    });\r\n  },\r\n  methods: {\r\n    updateSelectedItems() {\r\n      this.selectedItems = this.value;\r\n    },\r\n    collapseSection(element) {\r\n      // pulled from https://css-tricks.com/using-css-transitions-auto-dimensions/ and modified\r\n      // get the height of the element\'s inner content, regardless of its actual size\r\n      let sectionHeight = element.scrollHeight;\r\n      // temporarily disable all css transitions\r\n      var elementTransition = element.style.transition;\r\n      element.style.transition = "";\r\n      element.style.height = sectionHeight + "px !important";\r\n      element.style.overflowY = "hidden";\r\n      // element.style.width = sectionWidth + "px !important";\r\n\r\n      // on the next frame (as soon as the previous style change has taken effect),\r\n      // explicitly set the element\'s height to its current pixel height, so we\r\n      // aren\'t transitioning out of \'auto\'\r\n      requestAnimationFrame(function() {\r\n        element.style.height = sectionHeight + "px";\r\n        // element.style.width = sectionWidth + "px";\r\n        element.style.transition = elementTransition;\r\n        // element.style.overflowY = \'hidden\';\r\n\r\n        // on the next frame (as soon as the previous style change has taken effect),\r\n        // have the element transition to height: 0\r\n        requestAnimationFrame(function() {\r\n          element.style.height = 0 + "px";\r\n          // element.style.width = "0px";\r\n          element.style.paddingBottom = "0px";\r\n        });\r\n      });\r\n\r\n      // mark the section as "currently collapsed"\r\n      element.setAttribute("data-collapsed", "true");\r\n    },\r\n    expandSection(element) {\r\n      // pulled from https://css-tricks.com/using-css-transitions-auto-dimensions/ and modified\r\n      // get the height of the element\'s inner content, regardless of its actual size\r\n      let sectionHeight = element.scrollHeight;\r\n      // have the element transition to the height of its inner content\r\n      element.style.height = sectionHeight + "px";\r\n      // element.style.width = sectionWidth + "px";\r\n\r\n      element.style.paddingBottom = "5px";\r\n      // element.style.overflowY = "auto"\r\n      // when the next css transition finishes (which should be the one we just triggered)\r\n      element.addEventListener("transitionend", function() {\r\n        // remove this event listener so it only gets triggered once\r\n        element.removeEventListener("transitionend", this);\r\n        if (element.getAttribute("data-collapsed") == "false") {\r\n          // remove "height" from the element\'s inline styles, so it can return to its initial value\r\n          element.style.height = "auto";\r\n          element.style.overflowY = "visible";\r\n        }\r\n      });\r\n\r\n      // mark the section as "currently not collapsed"\r\n      element.setAttribute("data-collapsed", "false");\r\n    },\r\n    handleUpdate(value) {\r\n      this.selectedItems = value.slice();\r\n      this.$emit("input", this.selectedItems);\r\n    },\r\n    toggle() {\r\n      // this.open = !this.open;\r\n\r\n      if (!this.open) {\r\n        this.expandSection(this.$refs.content.$el);\r\n        this.open = true;\r\n      } else {\r\n        this.collapseSection(this.$refs.content.$el);\r\n        this.open = false;\r\n      }\r\n    },\r\n    quickSelect(item) {\r\n      let option = this.filter.items.filter(\r\n        i => i[this.valueAttribute] == item[this.valueAttribute]\r\n      )[0];\r\n      if (this.$refs.selectBar) {\r\n        this.$refs.selectBar.selectOption(option);\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    computeClass() {\r\n      if (this.open) {\r\n        return ["sidebar-open-carat"];\r\n      }\r\n      return [];\r\n    }\r\n  }\r\n};\r\nexport default ParametricFilter;\r\n</script>\r\n\r\n<style>\r\n.sr-only {\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  white-space: nowrap;\r\n  -webkit-clip-path: inset(50%);\r\n  clip-path: inset(50%);\r\n  border: 0;\r\n}\r\n.parametric-button {\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.parametric-open-carat {\r\n  transform: rotate(135deg) !important;\r\n}\r\n</style>\r\n'
            ]
          },
          media: void 0
        });
    },
    f,
    void 0,
    !1,
    void 0,
    !1,
    function(e) {
      return (e, t) =>
        (function(e, t) {
          const r = m ? t.media || "default" : e,
            n = h[r] || (h[r] = { ids: new Set(), styles: [] });
          if (!n.ids.has(e)) {
            n.ids.add(e);
            let r = t.source;
            if (
              (t.map &&
                ((r += "\n/*# sourceURL=" + t.map.sources[0] + " */"),
                (r +=
                  "\n/*# sourceMappingURL=data:application/json;base64," +
                  btoa(unescape(encodeURIComponent(JSON.stringify(t.map)))) +
                  " */")),
              n.element ||
                ((n.element = document.createElement("style")),
                (n.element.type = "text/css"),
                t.media && n.element.setAttribute("media", t.media),
                void 0 === u &&
                  (u =
                    document.head || document.getElementsByTagName("head")[0]),
                u.appendChild(n.element)),
              "styleSheet" in n.element)
            )
              n.styles.push(r),
                (n.element.styleSheet.cssText = n.styles
                  .filter(Boolean)
                  .join("\n"));
            else {
              const e = n.ids.size - 1,
                t = document.createTextNode(r),
                o = n.element.childNodes;
              o[e] && n.element.removeChild(o[e]),
                o.length
                  ? n.element.insertBefore(t, o[e])
                  : n.element.appendChild(t);
            }
          }
        })(e, t);
    },
    void 0,
    void 0
  ),
  y = function(e) {
    y.installed || ((y.installed = !0), e.component("ParametricFilter", g));
  },
  b = { install: y };
let A = null;
"undefined" != typeof window
  ? (A = window.Vue)
  : "undefined" != typeof global && (A = global.Vue),
  A && A.use(b),
  (g.install = y);
export default g;
