import { NButton as e } from "@intus/button";
import n from "@intus/badge";
import { NText as t } from "@intus/typography";
import r from "@intus/number-range";
import i from "vue-styled-components";
import a from "@intus/design-system";
function l(e, n) {
  return (
    n || (n = e.slice(0)),
    Object.freeze(
      Object.defineProperties(e, { raw: { value: Object.freeze(n) } })
    )
  );
}
function o() {
  var e = l([
    "\n  transition: 0.3s height;\n  margin-top: 3px;\n  height: 0px;\n  overflow-y: hidden;\n",
  ]);
  return (
    (o = function() {
      return e;
    }),
    e
  );
}
function s() {
  var e = l([
    "\n  background-image: linear-gradient(\n    to top right,\n    transparent 50%,\n    ",
    "\n      50%\n  );\n  float: right;\n  width: 0.5rem;\n  height: 0.5rem;\n  transform: rotate(45deg);\n  transition: 0.3s all;\n  display: inline-block;\n",
  ]);
  return (
    (s = function() {
      return e;
    }),
    e
  );
}
function u() {
  var e = l(["\n  width: 100%;\n"]);
  return (
    (u = function() {
      return e;
    }),
    e
  );
}
var c = {
  components: {
    NButton: e,
    NumericContainer: i.div(u()),
    NumericCarat: i("div", {
      flavor: String,
      disabled: Boolean,
      active: Boolean,
      defaultTheme: {
        type: Object,
        default: function() {
          return a;
        },
      },
    })(s(), function(e) {
      return e.disabled
        ? "rgba(0, 0, 0, 0.3)"
        : e.theme && e.theme[e.flavor]
        ? e.theme[e.flavor].color.color
        : e.defaultTheme[e.flavor]
        ? e.defaultTheme[e.flavor].color.color
        : "#222";
    }),
    NumericContentContainer: i.div(o()),
    NumberRange: r,
    Badge: n,
    NText: t,
  },
  data: function() {
    return { open: !1, internalValue: { lowerValue: 0, upperValue: 0 } };
  },
  props: {
    value: {
      type: Object,
      default: function() {
        return { lowValue: 0, highValue: 0 };
      },
    },
    name: { type: String, required: !0 },
    filter: { type: Object, required: !0 },
    defaultOpen: { type: Boolean, default: !1 },
    activeBadgeFlavor: { type: String, default: "Light" },
    flavor: { type: String, default: "Dark" },
    textFlavor: { type: String, default: "" },
    helpText: { type: String, default: "" },
  },
  mounted: function() {
    (this.open = this.defaultOpen),
      this.defaultOpen && this.expandSection(this.$refs.content.$el),
      this.filter.value
        ? (isNaN(this.filter.value.lowerValue)
            ? (this.internalValue.lowerValue = this.filter.min)
            : (this.internalValue.lowerValue = this.filter.value.lowerValue),
          isNaN(this.filter.value.upperValue),
          (this.internalValue.upperValue = this.filter.value.upperValue))
        : ((this.internalValue.lowerValue = this.filter.min),
          (this.internalValue.upperValue = this.filter.max));
    this.$watch("value", this.handleUpdate, { deep: !0 });
  },
  methods: {
    collapseSection: function(e) {
      var n = e.scrollHeight,
        t = e.style.transition;
      (e.style.transition = ""),
        (e.style.height = n + "px !important"),
        (e.style.overflowY = "hidden"),
        requestAnimationFrame(function() {
          (e.style.height = n + "px"),
            (e.style.transition = t),
            requestAnimationFrame(function() {
              (e.style.height = "0px"), (e.style.paddingBottom = "0px");
            });
        }),
        e.setAttribute("data-collapsed", "true");
    },
    expandSection: function(e) {
      var n = e.scrollHeight;
      (e.style.height = n + "px"),
        (e.style.paddingBottom = "5px"),
        e.addEventListener("transitionend", function() {
          e.removeEventListener("transitionend", this),
            "false" == e.getAttribute("data-collapsed") &&
              ((e.style.height = "auto"), (e.style.overflowY = "visible"));
        }),
        e.setAttribute("data-collapsed", "false");
    },
    bubbleInput: function(e) {
      (this.internalValue = e), this.$emit("input", this.internalValue);
    },
    bubbleChange: function(e) {
      (this.internalValue = e), this.$emit("change", this.internalValue);
    },
    handleUpdate: function(e) {
      (this.internalValue.lowerValue = this.value.lowerValue),
        (this.internalValue.upperValue = this.value.upperValue);
    },
    toggle: function() {
      this.open
        ? (this.collapseSection(this.$refs.content.$el), (this.open = !1))
        : (this.expandSection(this.$refs.content.$el), (this.open = !0));
    },
  },
  computed: {
    computedStep: function() {
      return "range" == this.filter.numeric_type
        ? [this.filter.step]
        : this.filter.steps;
    },
    computeClass: function() {
      return this.open ? ["sidebar-open-carat"] : [];
    },
  },
};
const p =
  "undefined" != typeof navigator &&
  /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
let d;
const h = {};
const m = c;
var f = function() {
  var e = this,
    n = e.$createElement,
    t = e._self._c || n;
  return t(
    "numeric-container",
    [
      t(
        "n-button",
        {
          staticClass: "numeric-button",
          attrs: { block: !0, flavor: e.flavor },
          on: { click: e.toggle },
        },
        [
          t(
            "span",
            [
              e._v("\n      " + e._s(e.filter.display) + "\n      "),
              t("badge", { attrs: { flavor: e.activeBadgeFlavor } }, [
                e._v("Active"),
              ]),
            ],
            1
          ),
          e._v(" "),
          t("numeric-carat", {
            class: e.computeClass,
            attrs: { flavor: e.flavor, disabled: e.filter.disabled },
          }),
        ],
        1
      ),
      e._v(" "),
      t(
        "numeric-content-container",
        { ref: "content" },
        [
          t("number-range", {
            attrs: {
              max: e.filter.max,
              min: e.filter.min,
              steps: e.computedStep,
              label: e.filter.display,
              "label-flavor": e.textFlavor,
              name: e.name,
            },
            on: { input: e.bubbleInput, change: e.bubbleChange },
            model: {
              value: e.value,
              callback: function(n) {
                e.value = n;
              },
              expression: "value",
            },
          }),
          e._v(" "),
          t("text", { attrs: { flavor: e.textFlavor } }, [
            e._v(e._s(e.helpText)),
          ]),
        ],
        1
      ),
    ],
    1
  );
};
f._withStripped = !0;
const g = (function(e, n, t, r, i, a, l, o, s, u) {
  "boolean" != typeof l && ((s = o), (o = l), (l = !1));
  const c = "function" == typeof t ? t.options : t;
  let p;
  if (
    (e &&
      e.render &&
      ((c.render = e.render),
      (c.staticRenderFns = e.staticRenderFns),
      (c._compiled = !0),
      i && (c.functional = !0)),
    r && (c._scopeId = r),
    a
      ? ((p = function(e) {
          (e =
            e ||
            (this.$vnode && this.$vnode.ssrContext) ||
            (this.parent &&
              this.parent.$vnode &&
              this.parent.$vnode.ssrContext)) ||
            "undefined" == typeof __VUE_SSR_CONTEXT__ ||
            (e = __VUE_SSR_CONTEXT__),
            n && n.call(this, s(e)),
            e && e._registeredComponents && e._registeredComponents.add(a);
        }),
        (c._ssrRegister = p))
      : n &&
        (p = l
          ? function(e) {
              n.call(this, u(e, this.$root.$options.shadowRoot));
            }
          : function(e) {
              n.call(this, o(e));
            }),
    p)
  )
    if (c.functional) {
      const e = c.render;
      c.render = function(n, t) {
        return p.call(t), e(n, t);
      };
    } else {
      const e = c.beforeCreate;
      c.beforeCreate = e ? [].concat(e, p) : [p];
    }
  return t;
})(
  { render: f, staticRenderFns: [] },
  function(e) {
    e &&
      e("data-v-dde6a1e4_0", {
        source:
          "\n.numeric-content-input {\r\n  width: calc(100% - 10px);\r\n  margin-left: 5px;\n}\n.numeric-button {\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\n}\n.numeric-open-carat {\r\n  transform: rotate(135deg) !important;\n}\n.drag-rail {\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: gray;\n}\n.drag-container {\r\n  height: 45px;\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n  width: 100%;\n}\n.dragger {\r\n  background-color: red;\r\n  height: 15px;\r\n  width: 15px;\r\n  position: absolute;\r\n  cursor: pointer;\n}\r\n",
        map: {
          version: 3,
          sources: [
            "C:\\Users\\pedro\\Documents\\Work\\Storybook\\src\\components\\Storefront\\NumericFilter\\src\\NumericFilter.vue",
          ],
          names: [],
          mappings:
            ";AA2QA;EACA,wBAAA;EACA,gBAAA;AACA;AACA;EACA,8BAAA;EACA,aAAA;EACA,mBAAA;AACA;AACA;EACA,oCAAA;AACA;AAEA;EACA,WAAA;EACA,WAAA;EACA,sBAAA;AACA;AACA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;EACA,kBAAA;EACA,WAAA;AACA;AACA;EACA,qBAAA;EACA,YAAA;EACA,WAAA;EACA,kBAAA;EACA,eAAA;AACA",
          file: "NumericFilter.vue",
          sourcesContent: [
            '<template>\r\n  <numeric-container>\r\n    <n-button\r\n      :block="true"\r\n      :flavor="flavor"\r\n      @click="toggle"\r\n      class="numeric-button"\r\n    >\r\n      <span>\r\n        {{ filter.display }}\r\n        <badge :flavor="activeBadgeFlavor">Active</badge>\r\n      </span>\r\n      <numeric-carat\r\n        :flavor="flavor"\r\n        :class="computeClass"\r\n        :disabled="filter.disabled"\r\n      ></numeric-carat>\r\n    </n-button>\r\n    <numeric-content-container ref="content">\r\n      <number-range\r\n        :max="filter.max"\r\n        :min="filter.min"\r\n        :steps="computedStep"\r\n        :label="filter.display"\r\n        :label-flavor="textFlavor"\r\n        :name="name"\r\n        v-model="value"\r\n        @input="bubbleInput"\r\n        @change="bubbleChange"\r\n      ></number-range>\r\n      <text :flavor="textFlavor">{{ helpText }}</text>\r\n    </numeric-content-container>\r\n  </numeric-container>\r\n</template>\r\n\r\n<script>\r\nimport { NButton } from "@intus/button";\r\nimport Badge from "@intus/badge";\r\nimport { NText } from "@intus/typography";\r\nimport NumberRange from "@intus/number-range";\r\nimport styled from "vue-styled-components";\r\nimport Theme from "@intus/design-system";\r\nconst NumericContainer = styled.div`\r\n  width: 100%;\r\n`;\r\nconst props = {\r\n  flavor: String,\r\n  disabled: Boolean,\r\n  active: Boolean,\r\n  defaultTheme: {\r\n    type: Object,\r\n    default: function() {\r\n      return Theme;\r\n    }\r\n  }\r\n};\r\nconst NumericCarat = styled("div", props)`\r\n  background-image: linear-gradient(\r\n    to top right,\r\n    transparent 50%,\r\n    ${props =>\r\n        props.disabled\r\n          ? "rgba(0, 0, 0, 0.3)"\r\n          : props.theme && props.theme[props.flavor]\r\n          ? props.theme[props.flavor].color.color\r\n          : props.defaultTheme[props.flavor]\r\n          ? props.defaultTheme[props.flavor].color.color\r\n          : "#222"}\r\n      50%\r\n  );\r\n  float: right;\r\n  width: 0.5rem;\r\n  height: 0.5rem;\r\n  transform: rotate(45deg);\r\n  transition: 0.3s all;\r\n  display: inline-block;\r\n`;\r\nconst NumericContentContainer = styled.div`\r\n  transition: 0.3s height;\r\n  margin-top: 3px;\r\n  height: 0px;\r\n  overflow-y: hidden;\r\n`;\r\n\r\nexport const NumericFilter = {\r\n  components: {\r\n    NButton,\r\n    NumericContainer,\r\n    NumericCarat,\r\n    NumericContentContainer,\r\n    NumberRange,\r\n    Badge,\r\n    NText\r\n  },\r\n  data() {\r\n    return {\r\n      open: false,\r\n      internalValue: {\r\n        lowerValue: 0,\r\n        upperValue: 0\r\n      }\r\n    };\r\n  },\r\n  props: {\r\n    value: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          lowValue: 0,\r\n          highValue: 0\r\n        };\r\n      }\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    filter: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    defaultOpen: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    activeBadgeFlavor: {\r\n      type: String,\r\n      default: "Light"\r\n    },\r\n    flavor: {\r\n      type: String,\r\n      default: "Dark"\r\n    },\r\n    textFlavor: {\r\n      type: String,\r\n      default: ""\r\n    },\r\n    helpText: {\r\n      type: String,\r\n      default: ""\r\n    }\r\n  },\r\n  mounted() {\r\n    this.open = this.defaultOpen;\r\n    if (this.defaultOpen) {\r\n      this.expandSection(this.$refs.content.$el);\r\n    }\r\n    if (this.filter.value) {\r\n      if (!isNaN(this.filter.value.lowerValue)) {\r\n        this.internalValue.lowerValue = this.filter.value.lowerValue;\r\n      } else {\r\n        this.internalValue.lowerValue = this.filter.min;\r\n      }\r\n      if (!isNaN(this.filter.value.upperValue)) {\r\n        this.internalValue.upperValue = this.filter.value.upperValue;\r\n      } else {\r\n        this.internalValue.upperValue = this.filter.value.upperValue;\r\n      }\r\n    } else {\r\n      this.internalValue.lowerValue = this.filter.min;\r\n      this.internalValue.upperValue = this.filter.max;\r\n    }\r\n\r\n    let self = this;\r\n    self.$watch("value", self.handleUpdate, { deep: true });\r\n    // this.$watch("filter.value.lowerValue", this.handleUpdate, { deep: true });\r\n    // this.$watch("filter.value.upperValue", this.handleUpdate, { deep: true });\r\n  },\r\n  methods: {\r\n    collapseSection(element) {\r\n      // pulled from https://css-tricks.com/using-css-transitions-auto-dimensions/ and modified\r\n      // get the height of the element\'s inner content, regardless of its actual size\r\n      let sectionHeight = element.scrollHeight;\r\n      // temporarily disable all css transitions\r\n      var elementTransition = element.style.transition;\r\n      element.style.transition = "";\r\n      element.style.height = sectionHeight + "px !important";\r\n      element.style.overflowY = "hidden";\r\n      // element.style.width = sectionWidth + "px !important";\r\n\r\n      // on the next frame (as soon as the previous style change has taken effect),\r\n      // explicitly set the element\'s height to its current pixel height, so we\r\n      // aren\'t transitioning out of \'auto\'\r\n      requestAnimationFrame(function() {\r\n        element.style.height = sectionHeight + "px";\r\n        // element.style.width = sectionWidth + "px";\r\n        element.style.transition = elementTransition;\r\n        // element.style.overflowY = \'hidden\';\r\n\r\n        // on the next frame (as soon as the previous style change has taken effect),\r\n        // have the element transition to height: 0\r\n        requestAnimationFrame(function() {\r\n          element.style.height = 0 + "px";\r\n          // element.style.width = "0px";\r\n          element.style.paddingBottom = "0px";\r\n        });\r\n      });\r\n\r\n      // mark the section as "currently collapsed"\r\n      element.setAttribute("data-collapsed", "true");\r\n    },\r\n    expandSection(element) {\r\n      // pulled from https://css-tricks.com/using-css-transitions-auto-dimensions/ and modified\r\n      // get the height of the element\'s inner content, regardless of its actual size\r\n      let sectionHeight = element.scrollHeight;\r\n      // have the element transition to the height of its inner content\r\n      element.style.height = sectionHeight + "px";\r\n      // element.style.width = sectionWidth + "px";\r\n\r\n      element.style.paddingBottom = "5px";\r\n      // element.style.overflowY = "auto"\r\n      // when the next css transition finishes (which should be the one we just triggered)\r\n      element.addEventListener("transitionend", function() {\r\n        // remove this event listener so it only gets triggered once\r\n        element.removeEventListener("transitionend", this);\r\n        if (element.getAttribute("data-collapsed") == "false") {\r\n          // remove "height" from the element\'s inline styles, so it can return to its initial value\r\n          element.style.height = "auto";\r\n          element.style.overflowY = "visible";\r\n        }\r\n      });\r\n\r\n      // mark the section as "currently not collapsed"\r\n      element.setAttribute("data-collapsed", "false");\r\n    },\r\n    bubbleInput($event) {\r\n      this.internalValue = $event;\r\n      this.$emit("input", this.internalValue);\r\n    },\r\n    bubbleChange($event) {\r\n      this.internalValue = $event;\r\n      this.$emit("change", this.internalValue);\r\n    },\r\n    handleUpdate(value) {\r\n      this.internalValue.lowerValue = this.value.lowerValue;\r\n      this.internalValue.upperValue = this.value.upperValue;\r\n    },\r\n    toggle() {\r\n      if (!this.open) {\r\n        this.expandSection(this.$refs.content.$el);\r\n        this.open = true;\r\n      } else {\r\n        this.collapseSection(this.$refs.content.$el);\r\n        this.open = false;\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    computedStep() {\r\n      if (this.filter.numeric_type == "range") {\r\n        return [this.filter.step];\r\n      } else {\r\n        return this.filter.steps;\r\n      }\r\n    },\r\n    computeClass() {\r\n      if (this.open) {\r\n        return ["sidebar-open-carat"];\r\n      }\r\n      return [];\r\n    }\r\n  }\r\n};\r\nexport default NumericFilter;\r\n</script>\r\n\r\n<style>\r\n.numeric-content-input {\r\n  width: calc(100% - 10px);\r\n  margin-left: 5px;\r\n}\r\n.numeric-button {\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.numeric-open-carat {\r\n  transform: rotate(135deg) !important;\r\n}\r\n\r\n.drag-rail {\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: gray;\r\n}\r\n.drag-container {\r\n  height: 45px;\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n.dragger {\r\n  background-color: red;\r\n  height: 15px;\r\n  width: 15px;\r\n  position: absolute;\r\n  cursor: pointer;\r\n}\r\n</style>\r\n',
          ],
        },
        media: void 0,
      });
  },
  m,
  void 0,
  !1,
  void 0,
  !1,
  function(e) {
    return (e, n) =>
      (function(e, n) {
        const t = p ? n.media || "default" : e,
          r = h[t] || (h[t] = { ids: new Set(), styles: [] });
        if (!r.ids.has(e)) {
          r.ids.add(e);
          let t = n.source;
          if (
            (n.map &&
              ((t += "\n/*# sourceURL=" + n.map.sources[0] + " */"),
              (t +=
                "\n/*# sourceMappingURL=data:application/json;base64," +
                btoa(unescape(encodeURIComponent(JSON.stringify(n.map)))) +
                " */")),
            r.element ||
              ((r.element = document.createElement("style")),
              (r.element.type = "text/css"),
              n.media && r.element.setAttribute("media", n.media),
              void 0 === d &&
                (d = document.head || document.getElementsByTagName("head")[0]),
              d.appendChild(r.element)),
            "styleSheet" in r.element)
          )
            r.styles.push(t),
              (r.element.styleSheet.cssText = r.styles
                .filter(Boolean)
                .join("\n"));
          else {
            const e = r.ids.size - 1,
              n = document.createTextNode(t),
              i = r.element.childNodes;
            i[e] && r.element.removeChild(i[e]),
              i.length
                ? r.element.insertBefore(n, i[e])
                : r.element.appendChild(n);
          }
        }
      })(e, n);
  },
  void 0,
  void 0
);
var A = function(e) {
    A.installed || ((A.installed = !0), e.component("NumericFilter", g));
  },
  v = { install: A },
  b = null;
"undefined" != typeof window
  ? (b = window.Vue)
  : "undefined" != typeof global && (b = global.Vue),
  b && b.use(v),
  (g.install = A);
export default g;
