{"version":3,"file":"RawNavbar.esm.js","sources":["../src/RawNavbar.vue","../src/entry.js"],"sourcesContent":["<template>\r\n  <navbar-container\r\n    :flavor=\"flavor\"\r\n    ref=\"container\"\r\n    :fixed=\"fixed\"\r\n    :collapsed=\"collapsed\"\r\n    :data-navbar=\"_uid\"\r\n  >\r\n    <navbar-title ref=\"title\">\r\n      <div v-html=\"title.html\" class=\"navbar-brand\"></div>\r\n      <a v-if=\"title.text\" :href=\"title.url ? title.url : '#'\">\r\n        {{\r\n        title.text\r\n        }}\r\n      </a>\r\n    </navbar-title>\r\n    <n-button\r\n      class=\"nav-button\"\r\n      v-show=\"collapsed\"\r\n      :flavor=\"flavor\"\r\n      @click=\"toggleAccordion\"\r\n      ref=\"hamburger\"\r\n    >&#9776;</n-button>\r\n    <navbar-content-container :collapsed=\"collapsed\" ref=\"content\">\r\n      <slot></slot>\r\n    </navbar-content-container>\r\n  </navbar-container>\r\n</template>\r\n<script>\r\nimport {\r\n  NavbarContainer,\r\n  NavbarTitle,\r\n  NavbarContentContainer\r\n} from \"@IntusFacultas/navbar\";\r\nimport { NButton } from \"@IntusFacultas/button\";\r\nexport const Navbar = {\r\n  components: {\r\n    NavbarContainer,\r\n    NavbarTitle,\r\n    NavbarContentContainer,\r\n    NButton\r\n  },\r\n  data: () => {\r\n    return {\r\n      open: false,\r\n      contentWidth: 0,\r\n      containerWidth: 0,\r\n      navHeight: 0,\r\n      observer: null,\r\n      titleWidth: 0,\r\n      blockWidth: 0,\r\n      leaves: []\r\n    };\r\n  },\r\n  mounted() {\r\n    let self = this;\r\n    this.calculateDimensions();\r\n    window.addEventListener(\r\n      \"resize\",\r\n      this.debounce(this.calculateDimensions, 10, true),\r\n      {\r\n        passive: true\r\n      }\r\n    );\r\n    this.calculateContentWidth();\r\n    this.observer = new MutationObserver(this.calculateContentWidth);\r\n    this.observer.observe(this.$refs.content.$el, {\r\n      childList: true,\r\n      characterData: true,\r\n      subtree: true\r\n    });\r\n    window.addEventListener(\"click\", self.checkOffclick);\r\n  },\r\n  beforeDestroy() {\r\n    let self = this;\r\n    this.observer.disconnect();\r\n    window.removeEventListener(\"click\", self.checkOffclick);\r\n    window.removeEventListener(\r\n      \"resize\",\r\n      this.debounce(this.calculateDimensions, 10, true)\r\n    );\r\n  },\r\n  updated() {\r\n    this.calculateDimensions();\r\n  },\r\n  props: {\r\n    title: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          text: \"Brand\",\r\n          url: \"#\",\r\n          html: \"\"\r\n        };\r\n      }\r\n    },\r\n    fixed: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    flavor: {\r\n      type: String,\r\n      default: \"\"\r\n    }\r\n  },\r\n  methods: {\r\n    calculateContentWidth() {\r\n      let self = this;\r\n      function findBlockElement(elem) {\r\n        const INLINE_ELEMENTS = [\r\n          \"a\",\r\n          \"abbr\",\r\n          \"acronym\",\r\n          \"b\",\r\n          \"bdo\",\r\n          \"big\",\r\n          \"br\",\r\n          \"button\",\r\n          \"cite\",\r\n          \"code\",\r\n          \"dfn\",\r\n          \"em\",\r\n          \"i\",\r\n          \"img\",\r\n          \"input\",\r\n          \"kbd\",\r\n          \"label\",\r\n          \"map\",\r\n          \"object\",\r\n          \"output\",\r\n          \"q\",\r\n          \"samp\",\r\n          \"script\",\r\n          \"select\",\r\n          \"small\",\r\n          \"span\",\r\n          \"strong\",\r\n          \"sub\",\r\n          \"sup\",\r\n          \"textarea\",\r\n          \"time\",\r\n          \"tt\",\r\n          \"var\"\r\n        ];\r\n        if (INLINE_ELEMENTS.indexOf(elem.tagName.toLowerCase()) != -1) {\r\n          return elem;\r\n        }\r\n        for (let child of elem.children) {\r\n          if (INLINE_ELEMENTS.indexOf(child.tagName.toLowerCase()) != -1) {\r\n            return child;\r\n          }\r\n          for (let subchild of child.children) {\r\n            let potentialChild = findBlockElement(subchild);\r\n            if (potentialChild != null) {\r\n              return potentialChild;\r\n            }\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      function stepChildren(elem) {\r\n        if (elem.tagName.toUpperCase() == \"LI\") {\r\n          elem.children.forEach(child =>\r\n            self.leaves.push(findBlockElement(child))\r\n          );\r\n        } else {\r\n          elem.children.forEach(child => stepChildren(child));\r\n        }\r\n      }\r\n      stepChildren(this.$refs.content.$el);\r\n      this.blockWidth = this.leaves\r\n        .map(a => a.scrollWidth + 32)\r\n        .reduce((accum, val) => accum + val);\r\n    },\r\n    collapseSection(element) {\r\n      // pulled from https://css-tricks.com/using-css-transitions-auto-dimensions/ and modified\r\n      // get the height of the element's inner content, regardless of its actual size\r\n      let sectionHeight = element.scrollHeight;\r\n      // temporarily disable all css transitions\r\n      var elementTransition = element.style.transition;\r\n      element.style.transition = \"\";\r\n      element.style.height = sectionHeight + \"px !important\";\r\n      element.style.paddingBottom = \"0px\";\r\n      // element.style.width = sectionWidth + \"px !important\";\r\n\r\n      // on the next frame (as soon as the previous style change has taken effect),\r\n      // explicitly set the element's height to its current pixel height, so we\r\n      // aren't transitioning out of 'auto'\r\n      requestAnimationFrame(function() {\r\n        element.style.height = sectionHeight + \"px\";\r\n        // element.style.width = sectionWidth + \"px\";\r\n        element.style.transition = elementTransition;\r\n        // element.style.overflowY = 'hidden';\r\n\r\n        // on the next frame (as soon as the previous style change has taken effect),\r\n        // have the element transition to height: 0\r\n        requestAnimationFrame(function() {\r\n          element.style.height = 0 + \"px\";\r\n          // element.style.width = \"0px\";\r\n          element.style.paddingBottom = \"0px\";\r\n        });\r\n      });\r\n\r\n      // mark the section as \"currently collapsed\"\r\n      element.setAttribute(\"data-collapsed\", \"true\");\r\n    },\r\n    expandSection(element) {\r\n      // pulled from https://css-tricks.com/using-css-transitions-auto-dimensions/ and modified\r\n      // get the height of the element's inner content, regardless of its actual size\r\n      let sectionHeight = element.scrollHeight;\r\n      // have the element transition to the height of its inner content\r\n      element.style.height = sectionHeight + \"px\";\r\n      // element.style.width = sectionWidth + \"px\";\r\n\r\n      element.style.paddingBottom = \"5px\";\r\n      // element.style.overflowY = \"auto\"\r\n      // when the next css transition finishes (which should be the one we just triggered)\r\n      element.addEventListener(\"transitionend\", function() {\r\n        // remove this event listener so it only gets triggered once\r\n        element.removeEventListener(\"transitionend\", this);\r\n        if (element.getAttribute(\"data-collapsed\") == \"false\") {\r\n          // remove \"height\" from the element's inline styles, so it can return to its initial value\r\n          element.style.height = \"auto\";\r\n        }\r\n      });\r\n\r\n      // mark the section as \"currently not collapsed\"\r\n      element.setAttribute(\"data-collapsed\", \"false\");\r\n    },\r\n    debounce(func, wait, immediate) {\r\n      /**\r\n       * Pulled from: https://davidwalsh.name/javascript-debounce-function\r\n       */\r\n      var timeout;\r\n      return function() {\r\n        var context = this,\r\n          args = arguments;\r\n        var later = function() {\r\n          timeout = null;\r\n          if (!immediate) func.apply(context, args);\r\n        };\r\n        var callNow = immediate && !timeout;\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait);\r\n        try {\r\n          if (callNow) func.apply(context, args);\r\n        } catch {\r\n          // pass\r\n        }\r\n      };\r\n    },\r\n    calculateDimensions() {\r\n      if (typeof this.$refs.container != \"undefined\") {\r\n        if (!this.open) {\r\n          this.navHeight = this.$refs.container.$el.clientHeight;\r\n        }\r\n        this.containerWidth = this.$refs.container.$el.clientWidth;\r\n      }\r\n      if (typeof this.$refs.title != \"undefined\") {\r\n        this.titleWidth = this.$refs.title.$el.clientWidth;\r\n      }\r\n    },\r\n    toggleAccordion() {\r\n      if (!this.open) {\r\n        this.expandSection(this.$refs.content.$el);\r\n        this.open = true;\r\n      } else {\r\n        this.collapseSection(this.$refs.content.$el);\r\n        this.open = false;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    collapsed(newVal) {\r\n      if (newVal) {\r\n        this.$refs.content.$el.style.height = \"0px\";\r\n        // this.$refs.content.$el.style.width =  \"0px\";\r\n        this.$refs.content.$el.style.paddingBottom = \"0px\";\r\n        this.$refs.content.$el.style.overflow = \"hidden\";\r\n      } else {\r\n        this.$refs.content.$el.style.height = \"50px\";\r\n        // this.$refs.content.$el.style.width = \"initial\";\r\n        this.$refs.content.$el.style.paddingBottom = \"initial\";\r\n        this.$refs.content.$el.style.overflow = \"visible\";\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    collapsed() {\r\n      return this.blockWidth >= this.collapseCutOff;\r\n    },\r\n    collapseCutOff() {\r\n      let additionalPadding = 30;\r\n      return this.containerWidth - this.titleWidth - additionalPadding;\r\n    }\r\n  }\r\n};\r\nexport default Navbar;\r\n</script>\r\n\r\n<style>\r\n.navbar-brand {\r\n  display: inline-block;\r\n  padding-right: 5px;\r\n}\r\n.navbar-open-carat {\r\n  transform: rotate(135deg) !important;\r\n  margin-bottom: 4px;\r\n}\r\n.open {\r\n  max-height: 1980px !important;\r\n}\r\n.nav-button {\r\n  height: 37px;\r\n  margin-top: 0.4rem;\r\n  position: absolute;\r\n  right: 20px;\r\n}\r\n</style>\r\n","// Import vue component\r\nimport RawNavbar from \"./RawNavbar.vue\";\r\n\r\n// install function executed by Vue.use()\r\nconst install = function installRawNavbar(Vue) {\r\n  if (install.installed) return;\r\n  install.installed = true;\r\n  Vue.component(\"RawNavbar\", RawNavbar);\r\n};\r\n\r\n// Create module definition for Vue.use()\r\nconst plugin = {\r\n  install,\r\n};\r\n\r\n// To auto-install when vue is found\r\n// eslint-disable-next-line no-redeclare\r\n/* global window, global */\r\nlet GlobalVue = null;\r\nif (typeof window !== \"undefined\") {\r\n  GlobalVue = window.Vue;\r\n} else if (typeof global !== \"undefined\") {\r\n  GlobalVue = global.Vue;\r\n}\r\nif (GlobalVue) {\r\n  GlobalVue.use(plugin);\r\n}\r\n\r\n// Inject install function into component - allows component\r\n// to be registered via Vue.use() as well as Vue.component()\r\nRawNavbar.install = install;\r\n\r\n// Export component by default\r\nexport default RawNavbar;\r\nexport { RawNavbar };\r\n\r\n// It's possible to expose named exports when writing components that can\r\n// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';\r\n// export const RollupDemoDirective = component;\r\n"],"names":["install","installRawNavbar","Vue","installed","component","RawNavbar","plugin","GlobalVue","window","global","use"],"mappingsgBAAT,CAA0BC,GAA1B,EAA+B;AAC7C,MAAIF,OAAO,CAACG,SAAZ,EAAuB;AACvBH,EAAAA,OAAO,CAACG,SAAR,GAAoB,IAApB;AACAD,EAAAA,GAAG,CAACE,SAAJ,CAAc,WAAd,EAA2BC,iBAA3B;AACD,CAJD;;;AAOA,IAAMC,MAAM,GAAG;AACbN,EAAAA,OAAO,EAAPA;AADa,CAAf;AAKA;;AACA;;AACA,IAAIO,SAAS,GAAG,IAAhB;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCD,EAAAA,SAAS,GAAGC,MAAM,CAACN,GAAnB;AACD,CAFD,MAEO,IAAI,OAAOO,MAAP,KAAkB,WAAtB,EAAmC;AACxCF,EAAAA,SAAS,GAAGE,MAAM,CAACP,GAAnB;AACD;;AACD,IAAIK,SAAJ,EAAe;AACbA,EAAAA,SAAS,CAACG,GAAV,CAAcJ,MAAd;AACD;AAGD;;;AACAD,iBAAS,CAACL,OAAV,GAAoBA,OAApB;AAOA;AACA;;;;;"}