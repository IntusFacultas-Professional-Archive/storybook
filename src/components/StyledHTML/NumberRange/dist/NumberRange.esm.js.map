{"version":3,"file":"NumberRange.esm.js","sources":["../src/NumberRange.vue","../src/entry.js"],"sourcesContent":["<template>\r\n  <number-container>\r\n    <input-container>\r\n      <input-group-container class=\"number-range-min-input-container\">\r\n        <input-field-container>\r\n          <n-label :flavor=\"labelFlavor\" :for=\"name + 'LowerValue'\"\r\n            >{{ label }} Lower</n-label\r\n          >\r\n          <n-input\r\n            @keydown.up=\"increment($event, 'lowerValue')\"\r\n            @keydown.down=\"decrement($event, 'lowerValue')\"\r\n            type=\"number\"\r\n            v-model=\"lowerValue\"\r\n            @change=\"validateValue\"\r\n            :name=\"name + 'LowerValue'\"\r\n            :id=\"name + 'LowerValue'\"\r\n            ref=\"minInput\"\r\n            :min=\"min\"\r\n            :max=\"upperValue\"\r\n            class=\"number-range number-range\"\r\n          ></n-input>\r\n        </input-field-container>\r\n        <button-container>\r\n          <increment-button\r\n            @keydown.space=\"increment($event, 'lowerValue')\"\r\n            @mousedown=\"startIncrement($event, 'lowerValue')\"\r\n            @mouseup=\"stopIncrement()\"\r\n            @mouseleave=\"stopIncrement()\"\r\n          >\r\n            <span>&#8250;</span>\r\n          </increment-button>\r\n          <decrement-button\r\n            @keydown.space=\"decrement($event, 'lowerValue')\"\r\n            @mousedown=\"startDecrement($event, 'lowerValue')\"\r\n            @mouseup=\"stopDecrement()\"\r\n            @mouseleave=\"stopDecrement()\"\r\n          >\r\n            <span>&#8250;</span>\r\n          </decrement-button>\r\n        </button-container>\r\n      </input-group-container>\r\n      <input-group-container>\r\n        <input-field-container>\r\n          <n-label\r\n            :flavor=\"labelFlavor\"\r\n            class=\"number-range-max-label\"\r\n            :for=\"name + 'UpperValue'\"\r\n            >{{ label }} Upper</n-label\r\n          >\r\n          <n-input\r\n            @keydown.up=\"increment($event, 'upperValue')\"\r\n            @keydown.down=\"decrement($event, 'upperValue')\"\r\n            class=\"number-range\"\r\n            type=\"number\"\r\n            v-model=\"upperValue\"\r\n            @change=\"validateValue\"\r\n            :name=\"name + 'UpperValue'\"\r\n            :id=\"name + 'UpperValue'\"\r\n            ref=\"maxInput\"\r\n            :min=\"lowerValue\"\r\n            :max=\"max\"\r\n          ></n-input>\r\n        </input-field-container>\r\n        <button-container>\r\n          <increment-button\r\n            @keydown.space=\"increment($event, 'upperValue')\"\r\n            @mousedown=\"startIncrement($event, 'upperValue')\"\r\n            @mouseup=\"stopIncrement()\"\r\n            @mouseleave=\"stopIncrement()\"\r\n          >\r\n            <span>&#8250;</span>\r\n          </increment-button>\r\n          <decrement-button\r\n            @keydown.space=\"decrement($event, 'upperValue')\"\r\n            @mousedown=\"startDecrement($event, 'upperValue')\"\r\n            @mouseup=\"stopDecrement()\"\r\n            @mouseleave=\"stopDecrement()\"\r\n          >\r\n            <span>&#8250;</span>\r\n          </decrement-button>\r\n        </button-container>\r\n      </input-group-container>\r\n    </input-container>\r\n  </number-container>\r\n</template>\r\n\r\n<script>\r\nimport styled from \"vue-styled-components\";\r\nimport Theme from \"@IntusFacultas/design-system\";\r\nimport { NInput } from \"@IntusFacultas/input\";\r\nimport { NLabel } from \"@IntusFacultas/typography\";\r\nconst props = {\r\n  flavor: String,\r\n  defaultTheme: {\r\n    type: Object,\r\n    default: function () {\r\n      return Theme;\r\n    },\r\n  },\r\n};\r\nconst NumberContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst InputGroupContainer = styled.div`\r\n  margin-left: 2px;\r\n  margin-right: 2px;\r\n  display: flex;\r\n  position: relative;\r\n  min-width: calc(50% - 4px);\r\n`;\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\nconst InputFieldContainer = styled.div`\r\n  min-width: 100%;\r\n`;\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  margin-left: -22px;\r\n`;\r\nconst IncrementButton = styled.button`\r\n  height: 18px;\r\n  & span {\r\n    display: inline-block;\r\n    transform: rotate(-90deg);\r\n    margin-right: 3px;\r\n  }\r\n  border-radius: 0px 5px 0px 0px;\r\n  border: 1px solid transparent;\r\n  border-top-color: #222;\r\n  border-right-color: #222;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  background-color: #f0f0f0;\r\n  transition: color 0.1s ease-in-out, background-color 0.1s ease-in-out,\r\n    border-color 0.1s ease-in-out, box-shadow 0.1s ease-in-out;\r\n  &:hover {\r\n    background-color: #e1e1e1;\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst DecrementButton = styled.button`\r\n  height: 17px;\r\n  & span {\r\n    display: inline-block;\r\n    transform: rotate(90deg);\r\n  }\r\n  border-radius: 0px 0px 5px 0px;\r\n  border: 1px solid transparent;\r\n  border-bottom-color: #222;\r\n  border-right-color: #222;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 0;\r\n  background-color: #f0f0f0;\r\n  transition: color 0.1s ease-in-out, background-color 0.1s ease-in-out,\r\n    border-color 0.1s ease-in-out, box-shadow 0.1s ease-in-out;\r\n  &:hover {\r\n    background-color: #e1e1e1;\r\n    cursor: pointer;\r\n  }\r\n`;\r\nexport const NumberRange = {\r\n  components: {\r\n    NumberContainer,\r\n    InputContainer,\r\n    InputGroupContainer,\r\n    NLabel,\r\n    NInput,\r\n    ButtonContainer,\r\n    IncrementButton,\r\n    DecrementButton,\r\n    InputFieldContainer,\r\n  },\r\n  data() {\r\n    return {\r\n      lowerValue: 0,\r\n      upperValue: 0,\r\n      incrementID: 0,\r\n      decrementID: 0,\r\n      internalSteps: [],\r\n    };\r\n  },\r\n  props: {\r\n    value: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          lowValue: 0,\r\n          highValue: 0,\r\n        };\r\n      },\r\n    },\r\n    labelFlavor: {\r\n      type: String,\r\n      default: \"\",\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    label: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    max: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n    min: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n    steps: {\r\n      type: Array,\r\n      default() {\r\n        return [1];\r\n      },\r\n    },\r\n  },\r\n  watch: {\r\n    steps() {\r\n      this.internalSteps = this.steps.slice().sort((x, y) => x >= y);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.lowerValue = this.min;\r\n    this.upperValue = this.max;\r\n    let self = this;\r\n    self.$watch(\r\n      \"value\",\r\n      function () {\r\n        if (self.lowerValue != self.value.lowerValue) {\r\n          self.lowerValue = self.value.lowerValue;\r\n        }\r\n        if (self.upperValue != self.value.upperValue) {\r\n          self.upperValue = self.value.upperValue;\r\n        }\r\n        self.validateValue();\r\n      },\r\n      { deep: true }\r\n    );\r\n    if (this.steps.length == 0) {\r\n      throw \"Steps must have at least one value\";\r\n    }\r\n    if (this.steps.length > 1) {\r\n      if (this.steps[0] != this.min) {\r\n        throw \"Discrete steps must have a first value equal to the minimum\";\r\n      }\r\n      if (this.steps[this.steps.length - 1] != this.max) {\r\n        throw \"Discrete steps must have a last value equal to the maximum\";\r\n      }\r\n    }\r\n    this.internalSteps = this.steps.slice().sort((x, y) => x >= y);\r\n    if (!Array.prototype.findIndex) {\r\n      Object.defineProperty(Array.prototype, \"findIndex\", {\r\n        value: function (predicate) {\r\n          // 1. Let O be ? ToObject(this value).\r\n          if (this == null) {\r\n            throw new TypeError('\"this\" is null or not defined');\r\n          }\r\n\r\n          var o = Object(this);\r\n\r\n          // 2. Let len be ? ToLength(? Get(O, \"length\")).\r\n          var len = o.length >>> 0;\r\n\r\n          // 3. If IsCallable(predicate) is false, throw a TypeError exception.\r\n          if (typeof predicate !== \"function\") {\r\n            throw new TypeError(\"predicate must be a function\");\r\n          }\r\n\r\n          // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n          var thisArg = arguments[1];\r\n\r\n          // 5. Let k be 0.\r\n          var k = 0;\r\n\r\n          // 6. Repeat, while k < len\r\n          while (k < len) {\r\n            // a. Let Pk be ! ToString(k).\r\n            // b. Let kValue be ? Get(O, Pk).\r\n            // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\r\n            // d. If testResult is true, return k.\r\n            var kValue = o[k];\r\n            if (predicate.call(thisArg, kValue, k, o)) {\r\n              return k;\r\n            }\r\n            // e. Increase k by 1.\r\n            k++;\r\n          }\r\n\r\n          // 7. Return -1.\r\n          return -1;\r\n        },\r\n        configurable: true,\r\n        writable: true,\r\n      });\r\n    }\r\n  },\r\n  beforeDestroy() {},\r\n  methods: {\r\n    startIncrement(event, value) {\r\n      this.increment(event, value);\r\n      this.incrementID = setTimeout(() => {\r\n        this.incrementID = setInterval(() => this.increment(event, value), 60);\r\n      }, 60);\r\n    },\r\n    stopIncrement() {\r\n      clearTimeout(this.incrementID);\r\n      clearInterval(this.incrementID);\r\n    },\r\n    increment(event, value) {\r\n      event.preventDefault();\r\n      if (this[value] == this.max) {\r\n        return;\r\n      }\r\n      if (this.internalSteps.length > 1) {\r\n        let nextIndex =\r\n          this.internalSteps.findIndex((x) => x == this[value]) + 1;\r\n        if (nextIndex >= this.internalSteps.length) {\r\n          nextIndex = this.internalSteps.length - 1;\r\n        }\r\n        this[value] = parseFloat(this.internalSteps[nextIndex]);\r\n      } else {\r\n        this[value] += parseFloat(this.internalSteps[0]);\r\n      }\r\n      this.validateValue();\r\n    },\r\n    startDecrement(event, value) {\r\n      this.decrement(event, value);\r\n      this.decrementID = setTimeout(() => {\r\n        this.decrementID = setInterval(() => this.decrement(event, value), 60);\r\n      }, 60);\r\n    },\r\n    stopDecrement() {\r\n      clearTimeout(this.decrementID);\r\n      clearInterval(this.decrementID);\r\n    },\r\n    decrement(event, value) {\r\n      event.preventDefault();\r\n      if (this[value] == this.min) {\r\n        return;\r\n      }\r\n      if (this.internalSteps.length > 1) {\r\n        let nextIndex =\r\n          this.internalSteps.findIndex((x) => x == this[value]) - 1;\r\n        if (nextIndex <= 0) {\r\n          nextIndex = 0;\r\n        }\r\n        this[value] = parseFloat(this.internalSteps[nextIndex]);\r\n      } else {\r\n        this[value] -= parseFloat(this.internalSteps[0]);\r\n      }\r\n      this.validateValue();\r\n    },\r\n    roundValues(value) {\r\n      let copy = this.internalSteps.slice();\r\n      copy.push(parseFloat(value));\r\n      copy.sort((x, y) => x >= y);\r\n      let index = copy.findIndex((x) => x == parseFloat(value));\r\n      let lowerBound = index - 1;\r\n      let upperBound = index + 1;\r\n      if (lowerBound < 0) {\r\n        lowerBound = 0;\r\n      }\r\n      if (upperBound >= copy.length) {\r\n        upperBound = copy.length - 1;\r\n      }\r\n      copy = copy.slice(lowerBound, upperBound + 1);\r\n      return copy;\r\n    },\r\n    roundToNearestDiscreteStep(values, value) {\r\n      let lowerDelta = Math.abs(values[0] - value);\r\n      let upperDelta = Math.abs(values[values.length - 1] - value);\r\n      if (upperDelta < lowerDelta) {\r\n        // round up\r\n        return values[values.length - 1];\r\n      } else {\r\n        return values[0];\r\n      }\r\n    },\r\n    roundToNearestBasicStep(value, base) {\r\n      let distanceToBottom = 0;\r\n      let distanceToTop = 0;\r\n      let tracker = value;\r\n      let bottom = 0;\r\n      let top = 0;\r\n      while (Math.abs(tracker - base) % this.internalSteps[0] != 0) {\r\n        distanceToBottom++;\r\n        tracker--;\r\n      }\r\n      bottom = tracker;\r\n      tracker = value;\r\n      while (Math.abs(tracker - base) % this.internalSteps[0] != 0) {\r\n        distanceToTop++;\r\n        tracker++;\r\n      }\r\n      top = tracker;\r\n      if (distanceToBottom <= distanceToTop) {\r\n        return bottom;\r\n      }\r\n      return top;\r\n    },\r\n    validateValue() {\r\n      if (this.internalSteps.length != 1) {\r\n        if (this.internalSteps.indexOf(this.lowerValue) == -1) {\r\n          let copy = this.roundValues(this.lowerValue);\r\n          this.lowerValue = parseFloat(\r\n            this.roundToNearestDiscreteStep(copy, this.lowerValue)\r\n          );\r\n        }\r\n        if (this.internalSteps.indexOf(this.upperValue) == -1) {\r\n          let copy = this.roundValues(this.upperValue);\r\n          this.upperValue = parseFloat(\r\n            this.roundToNearestDiscreteStep(copy, this.upperValue)\r\n          );\r\n        }\r\n      } else {\r\n        if (Math.abs(this.lowerValue - this.min) % this.internalSteps[0] != 0) {\r\n          this.lowerValue = this.roundToNearestBasicStep(\r\n            this.lowerValue,\r\n            this.min\r\n          );\r\n        }\r\n        if (Math.abs(this.upperValue - this.max) % this.internalSteps[0] != 0) {\r\n          this.upperValue = this.roundToNearestBasicStep(\r\n            this.upperValue,\r\n            this.max\r\n          );\r\n        }\r\n      }\r\n      if (this.upperValue > this.max) {\r\n        this.upperValue = this.max;\r\n      }\r\n      if (this.lowerValue < this.min) {\r\n        this.lowerValue = this.min;\r\n      }\r\n      if (this.lowerValue > this.upperValue) {\r\n        this.lowerValue = parseFloat(this.upperValue);\r\n      }\r\n      this.lowerValue = parseFloat(this.lowerValue);\r\n      this.upperValue = parseFloat(this.upperValue);\r\n      this.$emit(\"change\", {\r\n        lowerValue: this.lowerValue,\r\n        upperValue: this.upperValue,\r\n      });\r\n    },\r\n  },\r\n};\r\nexport default NumberRange;\r\n</script>\r\n\r\n<style>\r\n.number-range-max-label {\r\n  float: right;\r\n  text-align: end;\r\n}\r\n.number-range {\r\n  border-right-color: transparent;\r\n}\r\n/* Chrome, Safari, Edge, Opera */\r\ninput.number-range::-webkit-outer-spin-button,\r\ninput.number-range::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n\r\n/* Firefox */\r\ninput[type=\"number\"].number-range {\r\n  -moz-appearance: textfield;\r\n}\r\n</style>\r\n","// Import vue component\r\nimport NumberRange from \"./NumberRange.vue\";\r\n\r\n// install function executed by Vue.use()\r\nconst install = function installNumberRange(Vue) {\r\n  if (install.installed) return;\r\n  install.installed = true;\r\n  Vue.component(\"NumberRange\", NumberRange);\r\n};\r\n\r\n// Create module definition for Vue.use()\r\nconst plugin = {\r\n  install,\r\n};\r\n\r\n// To auto-install when vue is found\r\n// eslint-disable-next-line no-redeclare\r\n/* global window, global */\r\nlet GlobalVue = null;\r\nif (typeof window !== \"undefined\") {\r\n  GlobalVue = window.Vue;\r\n} else if (typeof global !== \"undefined\") {\r\n  GlobalVue = global.Vue;\r\n}\r\nif (GlobalVue) {\r\n  GlobalVue.use(plugin);\r\n}\r\n\r\n// Inject install function into component - allows component\r\n// to be registered via Vue.use() as well as Vue.component()\r\nNumberRange.install = install;\r\n\r\n// Export component by default\r\nexport default NumberRange;\r\nexport { NumberRange };\r\n\r\n// It's possible to expose named exports when writing components that can\r\n// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';\r\n// export const RollupDemoDirective = component;\r\n"],"names":["install","installNumberRange","Vue","installed","component","NumberRange","plugin","GlobalVue","window","global","use"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA,mDAAA;AAIA,wDAAA;AAOA,mDAAA;AAIA,wDAAA;AAGA,oDAAA;AAMA,uDAAA;AAqBA,uDAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjJA,AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAGA,IAAMA,OAAO,GAAG,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAC/C,MAAIF,OAAO,CAACG,SAAZ,EAAuB;AACvBH,EAAAA,OAAO,CAACG,SAAR,GAAoB,IAApB;AACAD,EAAAA,GAAG,CAACE,SAAJ,CAAc,aAAd,EAA6BC,iBAA7B;AACD,CAJD;;;AAOA,IAAMC,MAAM,GAAG;AACbN,EAAAA,OAAO,EAAPA;AADa,CAAf;AAKA;;AACA;;AACA,IAAIO,SAAS,GAAG,IAAhB;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCD,EAAAA,SAAS,GAAGC,MAAM,CAACN,GAAnB;AACD,CAFD,MAEO,IAAI,OAAOO,MAAP,KAAkB,WAAtB,EAAmC;AACxCF,EAAAA,SAAS,GAAGE,MAAM,CAACP,GAAnB;AACD;;AACD,IAAIK,SAAJ,EAAe;AACbA,EAAAA,SAAS,CAACG,GAAV,CAAcJ,MAAd;AACD;AAGD;;;AACAD,iBAAW,CAACL,OAAZ,GAAsBA,OAAtB;AAOA;AACA;;;;;"}