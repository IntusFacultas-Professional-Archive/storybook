{"version":3,"file":"SelectMe.esm.js","sources":["../src/SelectMe.vue","../src/entry.js"],"sourcesContent":["<template>\r\n  <div class=\"selectme-container\">\r\n    <n-input\r\n      :id=\"name\"\r\n      autocomplete=\"off\"\r\n      type=\"text\"\r\n      placeholder=\"Search...\"\r\n      @click=\"openDropdown\"\r\n      @focus=\"openDropdown\"\r\n      @input=\"\r\n        openDropdown();\r\n        debounce(fireAjax, 200)();\r\n      \"\r\n      @blur=\"closeDropdown\"\r\n      :flavor=\"flavor\"\r\n      v-model=\"optionSearch\"\r\n      @keydown.delete=\"handleBackspace\"\r\n      @keydown.down=\"handleDown\"\r\n      @keydown.up=\"handleUp\"\r\n      @keydown.left=\"handleLeft\"\r\n      @keydown.right=\"handleRight\"\r\n      @keyup.enter=\"selectHoveredOption\"\r\n      :style=\"{ 'padding-left': calculatedPadding + 'px' }\"\r\n      :disabled=\"disabled\"\r\n    ></n-input>\r\n    <!-- Dropdown for all options -->\r\n    <div\r\n      v-if=\"showDropdown\"\r\n      class=\"selectme-dropdown\"\r\n      :style=\"{ width: calculatedWidth + 'px' }\"\r\n    >\r\n      <ul>\r\n        <li\r\n          v-for=\"(option, index) in selectOptions\"\r\n          tabindex=\"0\"\r\n          role=\"button\"\r\n          :key=\"'dropdown-' + option[valueAttribute] + '-' + index\"\r\n          :value=\"option[valueAttribute]\"\r\n          :ref=\"'hover' + option[valueAttribute]\"\r\n          @focus=\"hoverElement()\"\r\n          @keyup.space=\"selectHoveredOption\"\r\n          @keydown.down=\"hoverOption(1)\"\r\n          @keydown.up=\"hoverOption(-1)\"\r\n          @blur=\"closeDropdown\"\r\n          @keyup.enter=\"selectHoveredOption\"\r\n          @click=\"selectOption(option)\"\r\n          :class=\"{\r\n            'selectme-selected': contained(option),\r\n            'selectme-hovered': isHovered(option, hoveredOption),\r\n          }\"\r\n        >\r\n          <span class=\"sr-only\" v-if=\"contained(option)\">Active:</span>\r\n          <span class=\"sr-only\" v-else>Press enter or space to select:</span>\r\n          {{ option[displayAttribute] }}\r\n        </li>\r\n        <li v-if=\"loadAjax && loading\">Loading...</li>\r\n        <li v-if=\"loadAjax && !initialized && !errored && !loading\">\r\n          Please enter 1 or more characters\r\n        </li>\r\n        <li v-if=\"errored\">There was an issue contacting the server.</li>\r\n        <li\r\n          v-if=\"\r\n            (loadAjax &&\r\n              !errored &&\r\n              initialized &&\r\n              !loading &&\r\n              loadedOptions.length == 0) ||\r\n              (!loadAjax && selectOptions.length == 0)\r\n          \"\r\n        >\r\n          No results found\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <!-- Dropdown for selected values. Only shows when selected overflow input-->\r\n    <div\r\n      class=\"selectme-selected\"\r\n      :style=\"{\r\n        top: multiSelect\r\n          ? `${calculatedHeight}px`\r\n          : `${calculatedHeight + 4}px`,\r\n      }\"\r\n      v-show=\"\r\n        selectBoxWidth > computedCutOff &&\r\n          selectedOptions.length > 0 &&\r\n          canBeEmpty &&\r\n          multiSelect\r\n      \"\r\n      ref=\"selectDropdownBox\"\r\n      data-dropdown=\"parent\"\r\n    >\r\n      <n-button\r\n        @click=\"toggleSelectedDropdown\"\r\n        class=\"selectme-button selectme-badge\"\r\n        :flavor=\"badgeFlavor\"\r\n        data-dropdown=\"toggle\"\r\n      >\r\n        {{ selectedOptions.length }} selected...\r\n        <span class=\"select-me-ignore-me\" v-if=\"!showSelected\">&#x25BE;</span>\r\n        <span class=\"select-me-ignore-me\" v-else>&#x25B4;</span>\r\n      </n-button>\r\n      <div class=\"selectme-dropdown\" v-show=\"showSelected\">\r\n        <ul>\r\n          <li\r\n            tabindex=\"0\"\r\n            v-for=\"(option, index) in selectedOptions\"\r\n            :key=\"'selected-' + option[valueAttribute] + '-' + index\"\r\n            role=\"button\"\r\n            data-dropdown=\"child\"\r\n            @keyup.enter=\"deselectDropdownOption(option)\"\r\n            @keyup.space=\"deselectDropdownOption(option)\"\r\n            :ref=\"'selected' + option[valueAttribute]\"\r\n            :class=\"{\r\n              'selectme-hovered': isHovered(option, hoveredSelectedOption),\r\n            }\"\r\n            @click=\"deselectDropdownOption(option)\"\r\n          >\r\n            <span aria-hidden=\"true\">&#215;</span>\r\n            <span class=\"sr-only\">Press enter or space to deselect</span>\r\n            {{ option[displayAttribute] }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <!-- Inline selected options -->\r\n    <div\r\n      class=\"selectme-selected\"\r\n      ref=\"selectBox\"\r\n      :style=\"{ top: calculatedHeight + 'px' }\"\r\n      :class=\"{\r\n        'hidden-inline':\r\n          selectBoxWidth > computedCutOff && canBeEmpty && multiSelect,\r\n      }\"\r\n    >\r\n      <n-button\r\n        :flavor=\"badgeFlavor\"\r\n        class=\"selectme-button selectme-badge\"\r\n        :class=\"{ 'selectme-single-select-badge': !multiSelect }\"\r\n        v-for=\"(option, index) in selectedOptions\"\r\n        @click=\"deselectOption(option)\"\r\n        :key=\"'selected-badge-' + option[valueAttribute] + '-' + index\"\r\n      >\r\n        <span class=\"sr-only\">Press enter or space to deselect</span>\r\n        {{ option[displayAttribute] }}\r\n        <span\r\n          :class=\"computedSpanClass\"\r\n          class=\"select-me-ignore-me\"\r\n          v-if=\"canBeEmpty || (!canBeEmpty && selectedOptions.length > 1)\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          &#215;\r\n        </span>\r\n      </n-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { NInput } from \"@IntusFacultas/input\";\r\nimport { NButton } from \"@IntusFacultas/button\";\r\nimport axios from \"axios\";\r\nconst SelectMe = {\r\n  name: \"select-me\",\r\n  components: { NInput, NButton },\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      timeout: \"\",\r\n      optionSearch: \"\",\r\n      initialized: false,\r\n      errored: false,\r\n      showOptions: false,\r\n      ajaxTimeout: null,\r\n      showSelected: false,\r\n      selectBoxWidth: 0,\r\n      calculatedWidth: 0,\r\n      calculatedHeight: 0,\r\n      calculatedPadding: 0,\r\n      selectedOptions: [],\r\n      hoveredOption: {},\r\n      loadedOptions: [],\r\n      hoveredSelectedOption: {},\r\n      combinedPaddingPerBadge: 26,\r\n      hoveredIndex: -1,\r\n      hoveredSelectedIndex: -1,\r\n    };\r\n  },\r\n  watch: {\r\n    options: {\r\n      handler() {\r\n        if (\r\n          this.selectedOptions.length == 0 &&\r\n          !this.canBeEmpty &&\r\n          this.options.length != 0\r\n        ) {\r\n          this.selectOption(this.options[0]);\r\n        }\r\n      },\r\n      deep: true,\r\n    },\r\n    value(newValue) {\r\n      this.selectedOptions = newValue;\r\n      window.requestAnimationFrame(this.setSelectBoxWidth);\r\n      this.setCalculatedPadding();\r\n    },\r\n  },\r\n  props: {\r\n    value: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      },\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    loadAjax: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    endpoint: {\r\n      type: String,\r\n      default: \"\",\r\n    },\r\n    badgeFlavor: {\r\n      type: String,\r\n      default: \"Primary\",\r\n    },\r\n    flavor: {\r\n      type: String,\r\n      default: \"LightBlue\",\r\n    },\r\n    displayAttribute: {\r\n      type: String,\r\n      default: \"text\",\r\n    },\r\n    valueAttribute: {\r\n      type: String,\r\n      default: \"value\",\r\n    },\r\n    canBeEmpty: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    options: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      },\r\n    },\r\n    debug: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    multiSelect: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    initialValues: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      },\r\n    },\r\n  },\r\n  computed: {\r\n    computedSpanClass() {\r\n      var self = this;\r\n      if (!self.multiSelect) return [\"selectme-badge-single-span\"];\r\n      return [];\r\n    },\r\n    computedCutOff() {\r\n      var self = this;\r\n      return self.calculatedWidth - 100;\r\n    },\r\n    showDropdown() {\r\n      var self = this;\r\n      return self.showOptions || self.debug;\r\n    },\r\n    selectOptions() {\r\n      function textContains(n) {\r\n        return (\r\n          n[self.displayAttribute]\r\n            .toUpperCase()\r\n            .indexOf(self.optionSearch.toUpperCase()) > -1\r\n        );\r\n      }\r\n      var self = this;\r\n      let options = self.options;\r\n      function filter(fn, array) {\r\n        var rtArray = [];\r\n        for (var x = 0; x < array.length; x++) {\r\n          if (fn(array[x])) {\r\n            rtArray.push(array[x]);\r\n          }\r\n        }\r\n        return rtArray;\r\n      }\r\n      if (self.optionSearch && !self.loadAjax) {\r\n        options = filter(textContains, options);\r\n      }\r\n      if (self.loadAjax) {\r\n        return self.loadedOptions;\r\n      }\r\n      return options;\r\n    },\r\n  },\r\n  methods: {\r\n    deselectDropdownOption(option) {\r\n      var self = this;\r\n      self.deselectOption(option, false);\r\n      window.requestAnimationFrame(self.setSelectBoxWidth);\r\n    },\r\n    handleOffClick(event) {\r\n      var self = this;\r\n      if (!event.target.attributes[\"data-dropdown\"]) {\r\n        self.showSelected = false;\r\n      }\r\n    },\r\n    toggleSelectedDropdown() {\r\n      var self = this;\r\n      self.showSelected = !self.showSelected;\r\n    },\r\n    selectHoveredOption() {\r\n      var self = this;\r\n      if (self.showOptions) {\r\n        if (Object.keys(self.hoveredOption).length > 0) {\r\n          if (!self.contains(self.hoveredOption, self.selectedOptions)) {\r\n            if (!self.multiSelect) self.selectedOptions = [];\r\n            self.selectedOptions.push(Object.assign({}, self.hoveredOption));\r\n          } else {\r\n            self.deselectOption(self.hoveredOption, false);\r\n          }\r\n          self.$emit(\"input\", self.selectedOptions);\r\n          self.hoveredOption = {};\r\n          self.hoveredIndex = -1;\r\n          window.requestAnimationFrame(self.setSelectBoxWidth);\r\n          self.setCalculatedPadding();\r\n          if (self.multiSelect) {\r\n            self.$el.firstChild.focus();\r\n          } else {\r\n            self.closeDropdown();\r\n          }\r\n        }\r\n      } else if (self.showSelected) {\r\n        self.deselectOption(self.hoveredSelectedOption);\r\n        self.$emit(\"input\", self.selectedOptions);\r\n        self.hoveredSelectedOption = {};\r\n        self.showSelected = false;\r\n        setTimeout(function() {\r\n          self.hoveredIndex = -1;\r\n          window.requestAnimationFrame(self.setSelectBoxWidth);\r\n          self.setCalculatedPadding();\r\n          self.$el.firstChild.focus();\r\n        }, 550);\r\n      }\r\n    },\r\n    hoverElement() {\r\n      var self = this;\r\n      clearTimeout(self.timeout);\r\n      self.hoveredOption = self.selectOptions.filter(\r\n        (option) =>\r\n          option[self.valueAttribute] ==\r\n          document.activeElement.getAttribute(\"value\")\r\n      )[0];\r\n      self.hoveredIndex = self.selectOptions\r\n        .map((option) => option[self.valueAttribute])\r\n        .indexOf(self.hoveredOption[self.valueAttribute]);\r\n    },\r\n    hoverOption(step) {\r\n      var self = this;\r\n      var proposedIndex = self.hoveredIndex + step;\r\n      self.openDropdown();\r\n      if (proposedIndex >= self.selectOptions.length) {\r\n        self.hoveredIndex = 0;\r\n        self.hoveredOption = self.selectOptions[self.hoveredIndex];\r\n      } else if (proposedIndex < -1) {\r\n        return;\r\n      } else if (proposedIndex == -1) {\r\n        self.hoveredIndex = proposedIndex;\r\n        self.$el.firstChild.focus();\r\n        self.closeDropdown();\r\n        self.hoveredOption = {};\r\n      } else {\r\n        self.hoveredIndex = proposedIndex;\r\n        self.hoveredOption = self.selectOptions[self.hoveredIndex];\r\n        self.$forceUpdate();\r\n      }\r\n    },\r\n    hoverSelectedOption(step) {\r\n      var self = this;\r\n      var proposedIndex = self.hoveredIndex + step;\r\n      self.showSelected = true;\r\n      if (proposedIndex >= self.selectedOptions.length || proposedIndex < -1) {\r\n        return;\r\n      } else if (proposedIndex == -1) {\r\n        self.hoveredIndex = proposedIndex;\r\n        self.$el.firstChild.focus();\r\n        self.showSelected = false;\r\n        self.hoveredSelectedOption = {};\r\n      } else {\r\n        self.hoveredIndex = proposedIndex;\r\n        self.hoveredSelectedOption = self.selectedOptions[self.hoveredIndex];\r\n        self.$forceUpdate();\r\n      }\r\n    },\r\n    contains(option, options) {\r\n      var self = this;\r\n      for (var x = 0; x < options.length; x++) {\r\n        let textMatches =\r\n          option[self.displayAttribute] == options[x][self.displayAttribute];\r\n        let valueMatches =\r\n          option[self.valueAttribute] == options[x][self.valueAttribute];\r\n        if (textMatches && valueMatches) return true;\r\n      }\r\n      return false;\r\n    },\r\n    isHovered(option, hoverOption) {\r\n      var self = this;\r\n      let textMatches =\r\n        option[self.displayAttribute] == hoverOption[self.displayAttribute];\r\n      let valueMatches =\r\n        option[self.valueAttribute] == hoverOption[self.valueAttribute];\r\n      return textMatches && valueMatches;\r\n    },\r\n    handleUp() {\r\n      var self = this;\r\n      if (self.showSelected) {\r\n        self.hoverSelectedOption(-1);\r\n      } else if (self.showOptions) {\r\n        self.hoverOption(-1);\r\n      } else {\r\n        self.hoverOption(-1);\r\n      }\r\n    },\r\n    handleDown() {\r\n      var self = this;\r\n      if (self.showSelected) {\r\n        self.hoverSelectedOption(1);\r\n      } else if (self.showOptions) {\r\n        self.hoverOption(1);\r\n      } else {\r\n        self.hoverOption(1);\r\n      }\r\n    },\r\n    handleLeft() {\r\n      var self = this;\r\n      if (\r\n        self.optionSearch.length == 0 &&\r\n        self.selectedOptions.length > 0 &&\r\n        (self.selectBoxWidth > self.computedCutOff) & !self.showSelected\r\n      ) {\r\n        self.closeDropdown();\r\n        self.showSelected = true;\r\n      }\r\n    },\r\n    handleRight() {\r\n      var self = this;\r\n      if (self.showSelected) {\r\n        self.showSelected = false;\r\n        self.hoveredSelectedOption = {};\r\n        self.$el.firstChild.focus();\r\n      }\r\n    },\r\n    handleBackspace() {\r\n      var self = this;\r\n      if (\r\n        self.optionSearch.length == 0 &&\r\n        self.selectedOptions.length > 0 &&\r\n        self.selectBoxWidth <= self.computedCutOff\r\n      ) {\r\n        var el = self.selectedOptions.pop();\r\n        self.$emit(\"input\", self.selectedOptions);\r\n        window.requestAnimationFrame(self.setSelectBoxWidth);\r\n        self.setCalculatedPadding();\r\n        self.optionSearch = el[self.displayAttribute];\r\n      }\r\n    },\r\n    contained(option) {\r\n      var self = this;\r\n      return self.contains(option, self.selectedOptions);\r\n    },\r\n    debounce(func, wait, immediate) {\r\n      var self = this;\r\n      // pulled from https://davidwalsh.name/javascript-debounce-function\r\n      return function() {\r\n        var context = this,\r\n          args = arguments;\r\n        var later = function() {\r\n          self.ajaxTimeout = null;\r\n          if (!immediate) func.apply(context, args);\r\n        };\r\n        var callNow = immediate && !self.ajaxTimeout;\r\n        clearTimeout(self.ajaxTimeout);\r\n        self.ajaxTimeout = setTimeout(later, wait);\r\n        if (callNow) func.apply(context, args);\r\n      };\r\n    },\r\n    fireAjax() {\r\n      var self = this;\r\n      if (self.loadAjax && self.optionSearch) {\r\n        self.loading = true;\r\n        axios\r\n          .get(self.endpoint, { params: { text: self.optionSearch } })\r\n          .then((response) => {\r\n            self.initialized = true;\r\n            self.loading = false;\r\n            self.loadedOptions = response.data;\r\n          })\r\n          .catch((response) => {\r\n            self.loading = false;\r\n            self.errored = true;\r\n            console.error(\"SelectMe had a bad response from the server.\");\r\n            console.error(\"Response status code: \", response.status);\r\n            console.error(\"Response object following:\");\r\n            console.error(response);\r\n          });\r\n      } else if (self.loadAjax) {\r\n        self.loadedOptions = [];\r\n        self.initialized = false; // this is to force the component to show \"please type chars\" again\r\n      }\r\n    },\r\n    selectOption(option) {\r\n      var self = this;\r\n      if (!self.contains(option, self.selectedOptions)) {\r\n        if (!self.multiSelect) {\r\n          self.selectedOptions = [];\r\n        }\r\n        self.selectedOptions.push(option);\r\n      } else {\r\n        self.deselectOption(option, !self.multiSelect);\r\n      }\r\n      if (!self.loadAjax) {\r\n        self.optionSearch = \"\";\r\n      }\r\n      if (!self.multiSelect) {\r\n        self.closeDropdown();\r\n      }\r\n      self.$emit(\"input\", self.selectedOptions);\r\n      window.requestAnimationFrame(self.setSelectBoxWidth);\r\n      self.setCalculatedPadding();\r\n    },\r\n    deselectOption(option, closeDropdown) {\r\n      var self = this;\r\n      if (!self.canBeEmpty && self.selectedOptions.length == 1) {\r\n        return;\r\n      }\r\n      function findIndex(option, options) {\r\n        for (var x = 0; x < options.length; x++) {\r\n          if (option[self.valueAttribute] == options[x][self.valueAttribute]) {\r\n            return x;\r\n          }\r\n        }\r\n        return -1;\r\n      }\r\n      var index = findIndex(option, self.selectedOptions);\r\n      self.selectedOptions.splice(index, 1);\r\n      self.$forceUpdate();\r\n      if (typeof closeDropdown === \"undefined\" || closeDropdown) {\r\n        self.closeDropdown();\r\n      }\r\n      self.$emit(\"input\", self.selectedOptions);\r\n      window.requestAnimationFrame(self.setSelectBoxWidth);\r\n      self.setCalculatedPadding();\r\n    },\r\n    closeDropdown() {\r\n      var self = this;\r\n      self.hoveredIndex = -1;\r\n      self.timeout = setTimeout(function() {\r\n        self.showOptions = false;\r\n      }, 200);\r\n    },\r\n    openDropdown() {\r\n      var self = this;\r\n      self.$emit(\"focus\");\r\n      clearTimeout(self.timeout);\r\n      if (self.disabled) {\r\n        return false;\r\n      }\r\n      self.hoveredIndex = -1;\r\n      self.setCalculatedWidth();\r\n      self.showSelected = false;\r\n      self.showOptions = true;\r\n    },\r\n    setSelectBoxWidth() {\r\n      var self = this;\r\n      if (self.$refs.selectBox)\r\n        self.selectBoxWidth = self.$refs.selectBox.clientWidth + 5;\r\n      window.requestAnimationFrame(self.setSelectBoxWidth);\r\n    },\r\n    setCalculatedPadding() {\r\n      var self = this;\r\n      if (self.selectBoxWidth > self.computedCutOff) {\r\n        self.calculatedPadding = self.$refs.selectDropdownBox.clientWidth + 10;\r\n      } else {\r\n        self.calculatedPadding = self.selectBoxWidth;\r\n      }\r\n      window.requestAnimationFrame(self.setCalculatedPadding);\r\n    },\r\n    setCalculatedWidth() {\r\n      var self = this;\r\n      setTimeout(function() {\r\n        try {\r\n          self.calculatedHeight = self.$el.firstChild.offsetHeight * -1 + 5;\r\n          if (!self.multiSelect) {\r\n            self.calculatedHeight -= 4;\r\n          }\r\n          self.calculatedWidth = self.$el.firstChild.offsetWidth;\r\n          window.requestAnimationFrame(self.setSelectBoxWidth);\r\n          self.setCalculatedPadding();\r\n        } catch (err) {\r\n          // pass\r\n        }\r\n      }, 50);\r\n    },\r\n  },\r\n  mounted() {\r\n    var self = this;\r\n\r\n    window.requestAnimationFrame(self.setCalculatedPadding);\r\n    window.addEventListener(\"resize\", self.setCalculatedWidth);\r\n    window.addEventListener(\"click\", self.handleOffClick);\r\n    self.setCalculatedWidth();\r\n    setTimeout(function() {\r\n      self.setCalculatedWidth();\r\n    }, 200);\r\n    for (var x = 0; x < self.value.length; x++) {\r\n      var initVal = self.value[x];\r\n      for (var y = 0; y < self.options.length; y++) {\r\n        if (\r\n          self.options[y][self.valueAttribute] == initVal[self.valueAttribute]\r\n        ) {\r\n          self.selectedOptions.push(Object.assign({}, self.options[y]));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (\r\n      !self.canBeEmpty &&\r\n      self.options.length > 0 &&\r\n      self.value.length == 0 &&\r\n      !self.loadAjax\r\n    ) {\r\n      self.selectOption(self.options[0]);\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener(\"resize\", self.setCalculatedWidth);\r\n    window.removeEventListener(\"click\", self.handleOffClick);\r\n  },\r\n};\r\nexport default SelectMe;\r\n</script>\r\n<style scoped>\r\n.select-me-ignore-me {\r\n  pointer-events: none;\r\n}\r\n.selectme-button {\r\n  height: 30px;\r\n  margin-top: -2px;\r\n}\r\n.selectme-single-select-badge {\r\n  margin-top: 1px;\r\n}\r\n.hidden-inline {\r\n  opacity: 0;\r\n  pointer-events: none;\r\n}\r\n.selectme-badge {\r\n  display: inline-block;\r\n  padding: 0.25em 0.4em;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  vertical-align: baseline;\r\n  border-radius: 0.25rem;\r\n  font-weight: 700 !important;\r\n  font-size: 16px !important;\r\n  font-family: \"Segoe UI\" !important;\r\n}\r\n.selectme-container {\r\n  height: 45px;\r\n}\r\n.selectme-container * {\r\n  font-family: \"Roboto\", sans-serif;\r\n}\r\n\r\n.sr-only {\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  margin: -1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  border: 0;\r\n}\r\n.selectme-dropdown {\r\n  position: absolute;\r\n  z-index: 2;\r\n  background-color: white;\r\n  padding: 5px;\r\n  border: 1px solid rgba(0, 0, 0, 0.15);\r\n  border-radius: 0 0 5px 5px;\r\n  box-shadow: 0px 4px 7px -3px #dadada;\r\n  min-width: 200px;\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n}\r\n.selectme-badge-single-span {\r\n  float: left;\r\n  padding-right: 8px;\r\n}\r\n.selectme-badge-transparent {\r\n  color: black;\r\n  font-size: 16px !important;\r\n  background-color: transparent !important;\r\n}\r\n.selectme-selected {\r\n  position: relative;\r\n  display: inline-block;\r\n  margin-left: 5px;\r\n}\r\n.selectme-selected > button {\r\n  cursor: pointer;\r\n  padding: 7px;\r\n  margin-right: 2px;\r\n}\r\n.selectme-dropdown > ul {\r\n  list-style: none;\r\n  padding-left: 0px;\r\n  margin-left: 0px;\r\n  margin-bottom: 0px;\r\n}\r\n.selectme-dropdown > ul > li {\r\n  padding: 2px 10px 2px 10px;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  margin-left: 0px;\r\n  font-size: 16px;\r\n  max-height: 200px;\r\n  margin-bottom: -2px;\r\n  overflow-y: auto;\r\n}\r\n.selectme-dropdown > ul > li.selectme-selected {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n.selectme-dropdown > ul > li.selectme-hovered {\r\n  background-color: #eeeeee;\r\n}\r\n.selectme-dropdown > ul > li.selectme-selected.selectme-hovered {\r\n  background-color: #0069d9;\r\n  color: white;\r\n}\r\n.selectme-dropdown > ul > li:hover {\r\n  background-color: #eeeeee;\r\n}\r\n.selectme-dropdown > ul > li.selectme-selected:hover {\r\n  background-color: #0069d9;\r\n  color: white;\r\n}\r\n@keyframes SelectMeLoadingSpinner {\r\n  from {\r\n    -webkit-transform: rotate(0deg);\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    -webkit-transform: rotate(359deg);\r\n    transform: rotate(359deg);\r\n  }\r\n}\r\n.selectme-loading-spinner {\r\n  -webkit-animation: SelectMeLoadingSpinner 0.5s infinite steps(8); /* Safari, Chrome and Opera > 12.1 */\r\n  -moz-animation: SelectMeLoadingSpinner 0.5s infinite steps(8); /* Firefox < 16 */\r\n  -ms-animation: SelectMeLoadingSpinner 0.5s infinite steps(8); /* Internet Explorer */\r\n  -o-animation: SelectMeLoadingSpinner 0.5s infinite steps(8); /* Opera < 12.1 */\r\n  animation: SelectMeLoadingSpinner 0.5s infinite steps(8);\r\n}\r\n</style>\r\n","// Import vue component\r\nimport SelectMe from \"./SelectMe.vue\";\r\n\r\n// install function executed by Vue.use()\r\nconst install = function installSelectMe(Vue) {\r\n  if (install.installed) return;\r\n  install.installed = true;\r\n  Vue.component(\"SelectMe\", SelectMe);\r\n};\r\n\r\n// Create module definition for Vue.use()\r\nconst plugin = {\r\n  install,\r\n};\r\n\r\n// To auto-install when vue is found\r\n// eslint-disable-next-line no-redeclare\r\n/* global window, global */\r\nlet GlobalVue = null;\r\nif (typeof window !== \"undefined\") {\r\n  GlobalVue = window.Vue;\r\n} else if (typeof global !== \"undefined\") {\r\n  GlobalVue = global.Vue;\r\n}\r\nif (GlobalVue) {\r\n  GlobalVue.use(plugin);\r\n}\r\n\r\n// Inject install function into component - allows component\r\n// to be registered via Vue.use() as well as Vue.component()\r\nSelectMe.install = install;\r\n\r\n// Export component by default\r\nexport default SelectMe;\r\nexport { SelectMe };\r\n\r\n// It's possible to expose named exports when writing components that can\r\n// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';\r\n// export const RollupDemoDirective = component;\r\n"],"names":["install","installSelectMe","Vue","installed","component","SelectMe","plugin","GlobalVue","window","global","use"],"mappings":";;;;;AAijeAAT,CAAyBC,GAAzB,EAA8B;AAC5C,MAAIF,OAAO,CAACG,SAAZ,EAAuB;AACvBH,EAAAA,OAAO,CAACG,SAAR,GAAoB,IAApB;AACAD,EAAAA,GAAG,CAACE,SAAJ,CAAc,UAAd,EAA0BC,iBAA1B;AACD,CAJD;;;AAOA,IAAMC,MAAM,GAAG;AACbN,EAAAA,OAAO,EAAPA;AADa,CAAf;AAKA;;AACA;;AACA,IAAIO,SAAS,GAAG,IAAhB;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCD,EAAAA,SAAS,GAAGC,MAAM,CAACN,GAAnB;AACD,CAFD,MAEO,IAAI,OAAOO,MAAP,KAAkB,WAAtB,EAAmC;AACxCF,EAAAA,SAAS,GAAGE,MAAM,CAACP,GAAnB;AACD;;AACD,IAAIK,SAAJ,EAAe;AACbA,EAAAA,SAAS,CAACG,GAAV,CAAcJ,MAAd;AACD;AAGD;;;AACAD,iBAAQ,CAACL,OAAT,GAAmBA,OAAnB;AAOA;AACA;;;;;"}