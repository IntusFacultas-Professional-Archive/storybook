@use '../Text/textConstants' as text;
@use '../constants' as constants;
@use '../_stacking' as stacking;
@use '../_colors' as colors;
@use '../Input/_inputConstants.scss' as input;

$RightHandSpacing: 2em;
$PseudoElementSizing: 3em;

.IFCDropdown {
  position: relative;
  width: 100%;

  @include input.InputSVGContainer() {
    padding: 0 .5em;
    margin-right: calc(#{input.$InputHorizontalPadding} + .5em);
  };
  @include input.LabelContainer;
  @include input.FloatedInputBorder;

  &__input {
    min-width: 200px;
    z-index: stacking.$DropdownZIndex;
    @include text.DefaultTextStyling;
    height: 41px;
    padding: .5em 1em;
    box-sizing: border-box;
    border: 0;
    font-size: 16px;
    flex: 1;
    background-color: transparent;
    &:focus, &:active, &:hover {
      outline: 0;
    }
    @include colors.themed() {
      color: colors.retrieveColor('text-normal');
    }
  }

  &__formContainer {
    position: relative;
    display: flex;
  }

  &__inputContainer {
    display: flex;
    flex-wrap: wrap;
    z-index: stacking.$DropdownZIndex;
    width: 100%;
    position: relative;
    min-height: 41px;
    padding-right: $RightHandSpacing;
    box-sizing: border-box;
    & > svg {
      transition: transform .1s ease-out;
      height: 20px;
      width: 20px;
      position: absolute;
      right: .5em;
      transform: rotate(-90deg);
      top: .73em;
    }
    @include input.FieldVariants(&);
    &--focus {
      & > svg {
        transform: rotate(90deg);
      }
    }
    &--disabled {
      opacity: constants.$DisabledOpacity;
      @include colors.themed() {
        border-color: colors.retrieveColor('text-disabled') !important;
      }
      & label {
        @include colors.themed() {
          color: colors.retrieveColor('text-disabled');
        }
      }
    }
  }
  &__labelBorderContainer {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    box-sizing: border-box;
    display: flex;
    pointer-events: none;
     z-index: stacking.$DropdownLabelZIndex;
  }
  &__backgroundCatcher {
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
  }
  &__dropdownContainer {
    position: absolute;
    top:100%;
    width: 100%;
    z-index: stacking.$DropdownMenuZIndex;
    padding: 0 0 0 0;
    box-sizing: border-box;
    &--above {
      bottom: calc(100% + 15px);
      top: unset;
    }
  }
  &__dropdown {
    margin: 0;
    padding: 0;
    background-color: white;
    border-radius: 0px 0px constants.$DefaultBorderRadius constants.$DefaultBorderRadius;
    list-style: none;
    max-height: 200px;
    overflow-y:auto;
    display: flex;
    flex-direction: column;
    & > li:nth-child(1) > button {
      border-top: 0 !important;
    }
    @include colors.themed() {
      border: 1px solid colors.retrieveColor('dropdown-background');
      box-shadow: colors.retrieveColor('dropdown-shadow');
    }
  }
  &__button {
    padding: .75em $PseudoElementSizing .75em 1em;
    border-left: 0;
    border-right: 0;
    border-bottom: 0;
    width: 100%;
    display: flex;
    justify-content:flex-start;
    align-items: center;
    cursor: pointer;
    transition: background-color constants.$DefaultTiming ease-out;
    position: relative;
    @include colors.themed() {
      border-top: constants.$DefaultBorderWidth constants.$DefaultBorderStyle colors.retrieveColor('dropdown-border');
      background-color: colors.retrieveColor('dropdown-background');
      color: colors.retrieveColor('dropdown-text');
    }
    &:hover, &:focus {
      outline: 0;
    }
    &--enabled {
      &::after {
        position: absolute;
        width: $PseudoElementSizing;
        right: 0;
        top: 0;
        bottom: 0;
        transition: transform .1s ease-out;
        transform-origin: center right;
        transform: scaleX(0);
        content: "\2190";
        font-size: 20px;
        max-width: $PseudoElementSizing;
        font-weight: bold;
        display: flex;
        justify-content: center;
        align-items: center;
        @include colors.themed() {
          color: colors.retrieveColor('text-dark');
          background-color: colors.retrieveColor('dropdown-select');
        }
      }
      &:hover, &:focus {
        @include colors.themed() {
          background-color: colors.retrieveColor('dropdown-hover');
        }
        outline: 0;
        &::after {
          transform: scaleX(1);
        }
      }
    }
    &--disabled {
      pointer-events: none;
      opacity: .8;
    }
    &--selected {
      &::after {
        transform: scaleX(1);
        // the reason we do this and not ./icons/x.svg is because when this gets imported in theme.scss it will
        // look in theme/icons/x.svg if we don't do this.
        // background-image: url('../Dropdown/icons/x.svg');
        // background-size: 15px 12px;
        content: "\2715";
        font-size: 20px;
        font-weight: bold;
        max-width: $PseudoElementSizing;
        @include colors.themed() {
          color: colors.retrieveColor('text-white');
          background-color: colors.retrieveColor('dropdown-deselect');
        }
      }
    }
  }
  &__selectedButton {
    padding: .25em 1em;
    display: inline-block;
    cursor: pointer;
    border-radius: constants.$DefaultBorderRadius;
    transition: background-color constants.$DefaultTiming ease-out, color constants.$DefaultTiming ease-out;
    margin: .5em 0 0 .5em;
    height: 30px;
    z-index: stacking.$DropdownSelectedZIndex;
    color: #444;

    @include colors.themed() {
      background-color: colors.retrieveColor('info');
      border: 1px solid colors.retrieveColor('info');
    }

    &:hover, &:focus {
      @include colors.themed() {
        background-color: colors.retrieveColor('dropdown-deselect');
        border: 1px solid colors.retrieveColor('dropdown-deselect');
      }
      color: white;
    }
    &--disabled {
      pointer-events: none;
      opacity: .6;
    }
  }
}