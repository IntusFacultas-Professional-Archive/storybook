{"version":3,"file":"VueMe.esm.js","sources":["../src/VueMe.vue","../src/entry.js"],"sourcesContent":["<template>\r\n  <div>\r\n    <vue-me-dialog\r\n      v-for=\"(alert, index) in alerts\"\r\n      :key=\"index\"\r\n      :flavor=\"alert.flavor\"\r\n      :id=\"alert.id\"\r\n      :parent=\"alert.parent\"\r\n      :zIndex=\"alert.zIndex\"\r\n      :closeTime=\"alert.closeTime\"\r\n      :autoCloseIndex=\"alert.autoCloseIndex\"\r\n      :autoClose=\"alert.autoClose\"\r\n      :title=\"alert.title\"\r\n      :icon=\"alert.icon\"\r\n      :width=\"alert.width\"\r\n      :content=\"alert.content\"\r\n      :fields=\"alert.fields\"\r\n      :backgroundDismiss=\"alert.backgroundDismiss\"\r\n      :buttons=\"alert.buttons\"\r\n    ></vue-me-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// changing the file to try and force git to recognize the capitalization change\r\nimport styled from \"vue-styled-components\";\r\nimport { Theme } from \"@IntusFacultas/design-system\";\r\nimport { SubSectionTitle } from \"@IntusFacultas/typography\";\r\nimport { DialogButton } from \"@IntusFacultas/button\";\r\nimport { VueInput } from \"@IntusFacultas/input\";\r\nimport { FlexRow, FlexColumn } from \"@IntusFacultas/layout\";\r\nconst props = {\r\n  zIndex: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n  width: {\r\n    type: Number,\r\n    default: 360,\r\n  },\r\n  flavor: String,\r\n  defaultTheme: {\r\n    type: Object,\r\n    default: function () {\r\n      return Theme;\r\n    },\r\n  },\r\n};\r\nconst VueMeDialogContainer = styled(\"div\", props)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  position: fixed;\r\n  width: 100%;\r\n  z-index: ${(props) => props.zIndex + 1999};\r\n  top: 0px;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  right: 0px;\r\n`;\r\nconst VueMeBackdrop = styled(\"div\", props)`\r\n  background-color: #444;\r\n  opacity: 0;\r\n  z-index: ${(props) => props.zIndex + 1999};\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  transition-duration: 0.4s;\r\n  transition-timing-function: cubic-bezier(0.36, 0.55, 0.19, 1);\r\n  transition-property: opacity;\r\n  animation: vueme-fadein 0.4s;\r\n`;\r\nconst VueMeTitleContainer = styled.div`\r\n  display: flex;\r\n`;\r\nconst VueMeDialogBox = styled(\"div\", props)`\r\n  z-index: ${(props) => props.zIndex + 2000};\r\n  background-color: #fff;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  border-top: solid 7px\r\n    ${(props) =>\r\n      props.theme && props.theme[props.flavor]\r\n        ? props.theme[props.flavor].border.color\r\n        : props.defaultTheme[props.flavor]\r\n        ? props.defaultTheme[props.flavor].border.color\r\n        : \"white\"};\r\n  border-radius: 0.25rem;\r\n  min-width: ${(props) => props.width}px;\r\n  display: flex;\r\n  transition: all 0.4s;\r\n  transform: scale(0);\r\n  transition-timing-function: cubic-bezier(0.36, 0.55, 0.19, 1);\r\n`;\r\nconst VueMeDialogContentContainer = styled.div`\r\n  width: 100%;\r\n  font-family: \"Open Sans Regular\", -apple-system, BlinkMacSystemFont,\r\n    \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\",\r\n    \"Segoe UI Emoji\", \"Segoe UI Symbol\";\r\n  padding: 10px;\r\n  word-break: break-word;\r\n`;\r\nconst VueMeDialogContent = styled.div``;\r\nconst VueMeDialogButtonContainer = styled.div`\r\n  margin-top: 15px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\nconst VueMeDialog = {\r\n  components: {\r\n    VueMeDialogContainer,\r\n    VueMeBackdrop,\r\n    VueMeTitleContainer,\r\n    VueMeDialogBox,\r\n    VueMeDialogContentContainer,\r\n    VueMeDialogContent,\r\n    VueMeDialogButtonContainer,\r\n    SubSectionTitle,\r\n    DialogButton,\r\n    VueInput,\r\n    FlexRow,\r\n    FlexColumn,\r\n  },\r\n  data() {\r\n    return {\r\n      show: false,\r\n      intervalId: -1,\r\n      shaking: false,\r\n      enabled: false,\r\n      fieldValues: [],\r\n      internalCloseTime: 0,\r\n    };\r\n  },\r\n  props: {\r\n    flavor: {\r\n      type: String,\r\n      default: \"\",\r\n    },\r\n    id: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n    parent: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    zIndex: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    closeTime: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    autoCloseIndex: {\r\n      type: Number,\r\n      default: -1,\r\n    },\r\n    autoClose: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    title: {\r\n      type: String,\r\n      default: \"Alert\",\r\n    },\r\n    icon: {\r\n      type: String,\r\n      default: \"\",\r\n    },\r\n    width: {\r\n      type: Number,\r\n      default: 360,\r\n    },\r\n    content: {\r\n      type: String,\r\n      default: \"You forgot to provide content\",\r\n    },\r\n    fields: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      },\r\n    },\r\n    backgroundDismiss: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    buttons: {\r\n      type: Array,\r\n      default() {\r\n        return [\r\n          {\r\n            id: 1,\r\n            flavor: \"\",\r\n            text: \"Close\",\r\n            action: function () {\r\n              // empty\r\n            },\r\n          },\r\n        ];\r\n      },\r\n    },\r\n  },\r\n  mounted() {\r\n    let self = this;\r\n    this.$nextTick(function () {\r\n      self.open();\r\n    });\r\n  },\r\n  methods: {\r\n    open: function () {\r\n      this.show = true;\r\n      this.enabled = true;\r\n      this.internalCloseTime = this.closeTime;\r\n      if (this.autoClose) {\r\n        this.beginAutoClose();\r\n      }\r\n      let self = this;\r\n      setTimeout(function () {\r\n        self.$refs.backdrop.$el.classList.add(\"vueme-dialog-backdrop-open\");\r\n        self.$refs.dialogBox.$el.classList.add(\"vueme-dialog-open\");\r\n      }, 50);\r\n    },\r\n    handleAutoClose: function () {\r\n      if (this.internalCloseTime == 0) {\r\n        clearInterval(this.intervalId);\r\n        this.callFunction(this.buttons[this.autoCloseIndex]);\r\n      } else {\r\n        this.internalCloseTime--;\r\n      }\r\n    },\r\n    beginAutoClose: function () {\r\n      this.intervalId = setInterval(this.handleAutoClose, 1000);\r\n    },\r\n    callFunction: function (button) {\r\n      if (this.enabled) {\r\n        var close = button.action(this.fieldValues);\r\n        if (close !== false) {\r\n          this.close();\r\n        }\r\n      }\r\n    },\r\n    close: function () {\r\n      if (this.enabled && !this.shaking) {\r\n        this.enabled = false;\r\n        if (this && this.$refs && this.$refs.dialogBox) {\r\n          this.$refs.dialogBox.$el.classList.remove(\"vueme-dialog-open\");\r\n          this.$refs.dialogBox.$el.classList.add(\"vueme-dismiss-dialog\");\r\n        }\r\n        if (this && this.$refs && this.$refs.backdrop)\r\n          this.$refs.backdrop.$el.classList.remove(\r\n            \"vueme-dialog-backdrop-open\"\r\n          );\r\n        let self = this;\r\n        setTimeout(function () {\r\n          self.show = false;\r\n          self.show = false;\r\n          // destroy the vue listeners, etc\r\n          self.$destroy();\r\n\r\n          // remove the element from the DOM\r\n          self.$el.parentNode.removeChild(self.$el);\r\n          self.parent.close(self.id);\r\n        }, 420);\r\n      }\r\n    },\r\n    closeDialog: function () {\r\n      if (!this.enabled) {\r\n        return;\r\n      }\r\n      if (this.backgroundDismiss) {\r\n        this.close();\r\n      } else {\r\n        if (this && this.$refs && this.$refs.dialogBox)\r\n          this.$refs.dialogBox.$el.classList.add(\"vueme-shake-dialog\");\r\n        let self = this;\r\n        this.shaking = true;\r\n        setTimeout(function () {\r\n          self.shaking = false;\r\n          if (self && self.$refs && self.$refs.dialogBox)\r\n            self.$refs.dialogBox.$el.classList.remove(\"vueme-shake-dialog\");\r\n        }, 1000);\r\n      }\r\n    },\r\n  },\r\n  template: `\r\n  <vue-me-dialog-container :z-index=\"zIndex\">\r\n    <vue-me-backdrop\r\n      ref=\"backdrop\"\r\n      :class=\"{'vueme-dialog-backdrop-open' : show}\"\r\n      :z-index=\"zIndex\"\r\n      @click=\"closeDialog\"\r\n    ></vue-me-backdrop>\r\n      <vue-me-dialog-box\r\n        ref=\"dialogBox\"\r\n        :flavor=\"flavor\"\r\n        :width=\"width\"\r\n      >\r\n        <vue-me-dialog-content-container>\r\n          <vue-me-title-container>\r\n            <span v-html=\"icon\"></span>\r\n            <sub-section-title class=\"vue-me-title\">{{title}}</sub-section-title>\r\n          </vue-me-title-container>\r\n          <vue-me-dialog-content>\r\n            <div v-html=\"content\"></div>\r\n            <form v-if=\"fields.length > 0\">\r\n              <vue-input\r\n                v-for=\"field in fields\"\r\n                :key=\"'field' + field.id\"\r\n                :name=\"'vueMeField' + field.id\"\r\n                :input-type=\"field.type\"\r\n                :label=\"field.label\"\r\n                v-model=\"fieldValues[field.id]\"\r\n              ></vue-input>\r\n            </form>\r\n            <vue-me-dialog-button-container>\r\n              <dialog-button\r\n                v-for=\"(button, index) in buttons\"\r\n                :key=\"'button' + button.id\"\r\n                @click=\"callFunction(button)\"\r\n                :flavor=\"button.flavor\"\r\n                :small=\"true\"\r\n                :disabled=\"shaking\"\r\n              >\r\n                {{button.text}}\r\n                <span v-if=\"index == autoCloseIndex\">({{internalCloseTime}})</span>\r\n              </dialog-button>\r\n            </vue-me-dialog-button-container>\r\n          </vue-me-dialog-content>\r\n        </vue-me-dialog-content-container>\r\n      </vue-me-dialog-box>\r\n  </vue-me-dialog-container>\r\n  `,\r\n};\r\nexport const VueMe = {\r\n  components: { VueMeDialog },\r\n  name: \"vue-me\",\r\n  data() {\r\n    return {\r\n      alerts: [],\r\n      availableId: 0,\r\n      availalbeAlertId: 0,\r\n      deletedAlerts: [],\r\n    };\r\n  },\r\n  props: {\r\n    parentInstance: {\r\n      type: Object,\r\n      default: \"\",\r\n    },\r\n  },\r\n  mounted: function () {\r\n    this.parentInstance.$alert = this.alert;\r\n    if (typeof Object.assign !== \"function\") {\r\n      // Must be writable: true, enumerable: false, configurable: true\r\n      Object.defineProperty(Object, \"assign\", {\r\n        value: function assign(target, varArgs) {\r\n          // .length of function is 2\r\n          \"use strict\";\r\n          if (target === null || target === undefined) {\r\n            throw new TypeError(\"Cannot convert undefined or null to object\");\r\n          }\r\n\r\n          var to = Object(target);\r\n\r\n          for (var index = 1; index < arguments.length; index++) {\r\n            var nextSource = arguments[index];\r\n\r\n            if (nextSource !== null && nextSource !== undefined) {\r\n              for (var nextKey in nextSource) {\r\n                // Avoid bugs when hasOwnProperty is shadowed\r\n                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n                  to[nextKey] = nextSource[nextKey];\r\n                }\r\n              }\r\n            }\r\n          }\r\n          return to;\r\n        },\r\n        writable: true,\r\n        configurable: true,\r\n      });\r\n    }\r\n  },\r\n  watch: {\r\n    deletedAlerts(newVal, oldVal) {\r\n      // we do this because if we change the alerts array while we still have alerts visible, it causes a re render but\r\n      // not a re-mount so the alerts \"disappear\". So we wait to delete from array until all alerts are no longer visible\r\n      if (\r\n        this.deletedAlerts.length == this.alerts.length &&\r\n        this.deletedAlerts.length != 0\r\n      ) {\r\n        this.alerts = [];\r\n        this.deletedAlerts = [];\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    close: function close(id) {\r\n      this.deletedAlerts.push(id);\r\n    },\r\n    formatField: function (field) {\r\n      var label = \"Label\";\r\n      if (field.label) {\r\n        label = field.label;\r\n      }\r\n      var fieldType = \"text\";\r\n      if (field.type) {\r\n        fieldType = field.type;\r\n      }\r\n      var id = label + \"-\" + fieldType;\r\n      if (field.id) {\r\n        id = field.id;\r\n      }\r\n      return {\r\n        id: id,\r\n        label: label,\r\n        type: fieldType,\r\n      };\r\n    },\r\n    formatButton: function (button) {\r\n      var text = \"Button\";\r\n      if (button.text) {\r\n        text = button.text;\r\n      }\r\n      var flavor = \"Primary\";\r\n      if (button.flavor) {\r\n        flavor = button.flavor;\r\n      }\r\n      var action = function () {};\r\n      if (button.action) {\r\n        action = button.action;\r\n      }\r\n      var id = this.availableId++;\r\n      if (button.id) {\r\n        id = button.id;\r\n      }\r\n      return {\r\n        id: id,\r\n        text: text,\r\n        flavor: flavor,\r\n        action: action,\r\n      };\r\n    },\r\n    alert: function (options) {\r\n      let dialogConfiguration = {\r\n        id: this.availalbeAlertId++,\r\n        parent: this,\r\n      };\r\n      let flavor = \"\";\r\n      if (options.flavor) {\r\n        flavor = options.flavor;\r\n      }\r\n      dialogConfiguration.flavor = flavor;\r\n      let width = 360;\r\n      if (options.width) {\r\n        width = options.width;\r\n      }\r\n      dialogConfiguration.width = width;\r\n      let title = \"Alert\";\r\n      if (typeof options.title == \"string\") {\r\n        title = options.title;\r\n      }\r\n      dialogConfiguration.title = title;\r\n      let icon = \"\";\r\n      if (options.icon) {\r\n        icon = options.icon;\r\n      }\r\n      dialogConfiguration.icon = icon;\r\n      let content = \"This is an alert.\";\r\n      if (typeof options.content == \"string\") {\r\n        content = options.content;\r\n      }\r\n      dialogConfiguration.content = content;\r\n      let backgroundDismiss = false;\r\n      if (options.backgroundDismiss) {\r\n        backgroundDismiss = options.backgroundDismiss;\r\n      }\r\n      dialogConfiguration.backgroundDismiss = backgroundDismiss;\r\n      let buttons = [this.formatButton({})];\r\n      if (options.buttons && Array.isArray(options.buttons)) {\r\n        buttons = [];\r\n        for (let x = 0; x < options.buttons.length; x++) {\r\n          buttons.push(this.formatButton(options.buttons[x]));\r\n        }\r\n      }\r\n      dialogConfiguration.buttons = buttons;\r\n      let fields = [];\r\n      if (options.fields && Array.isArray(options.fields)) {\r\n        fields = [];\r\n        for (let field of options.fields) {\r\n          fields.push(this.formatField(field));\r\n        }\r\n      }\r\n      dialogConfiguration.fields = fields;\r\n      let autoClose = options.autoClose;\r\n      if (autoClose) {\r\n        dialogConfiguration.autoClose = true;\r\n        autoClose = autoClose.split(\"|\");\r\n        dialogConfiguration.closeTime = Math.ceil(\r\n          parseInt(autoClose[1]) / 1000\r\n        );\r\n        for (let [index, button] of dialogConfiguration.buttons.entries()) {\r\n          if (button.id == autoClose[0]) {\r\n            dialogConfiguration.autoCloseIndex = index;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.alerts.push(Object.assign({}, dialogConfiguration));\r\n    },\r\n  },\r\n};\r\nexport default VueMe;\r\n</script>\r\n\r\n<style>\r\n.vue-me-title {\r\n  margin: 0px;\r\n}\r\n.vueme-dialog-backdrop-open {\r\n  opacity: 0.2;\r\n}\r\n.vueme-dialog-open {\r\n  transform: scale(1);\r\n}\r\n.vueme-dismiss-dialog {\r\n  transition: all 0.4s;\r\n  transition-timing-function: cubic-bezier(0.36, 0.55, 0.19, 1);\r\n  transform: scale(0);\r\n  display: block;\r\n}\r\n.vueme-shake-dialog {\r\n  -webkit-animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\r\n  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\r\n  -webkit-transform: translate3d(0, 0, 0);\r\n  transform: translate3d(0, 0, 0);\r\n}\r\n@keyframes vueme-fadein {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 0.2;\r\n  }\r\n}\r\n@keyframes shake {\r\n  10%,\r\n  90% {\r\n    -webkit-transform: translate3d(-2px, 0, 0);\r\n    transform: translate3d(-2px, 0, 0);\r\n  }\r\n  20%,\r\n  80% {\r\n    -webkit-transform: translate3d(4px, 0, 0);\r\n    transform: translate3d(4px, 0, 0);\r\n  }\r\n  30%,\r\n  50%,\r\n  70% {\r\n    -webkit-transform: translate3d(-8px, 0, 0);\r\n    transform: translate3d(-8px, 0, 0);\r\n  }\r\n  40%,\r\n  60% {\r\n    -webkit-transform: translate3d(8px, 0, 0);\r\n    transform: translate3d(8px, 0, 0);\r\n  }\r\n}\r\n@-ms-keyframes shake {\r\n  10%,\r\n  90% {\r\n    -webkit-transform: translate3d(-2px, 0, 0);\r\n    transform: translate3d(-2px, 0, 0);\r\n  }\r\n  20%,\r\n  80% {\r\n    -webkit-transform: translate3d(4px, 0, 0);\r\n    transform: translate3d(4px, 0, 0);\r\n  }\r\n  30%,\r\n  50%,\r\n  70% {\r\n    -webkit-transform: translate3d(-8px, 0, 0);\r\n    transform: translate3d(-8px, 0, 0);\r\n  }\r\n  40%,\r\n  60% {\r\n    -webkit-transform: translate3d(8px, 0, 0);\r\n    transform: translate3d(8px, 0, 0);\r\n  }\r\n}\r\n</style>\r\n","// Import vue component\r\nimport VueMe from \"./VueMe.vue\";\r\n\r\n// install function executed by Vue.use()\r\nconst install = function installVueMe(Vue) {\r\n  if (install.installed) return;\r\n  install.installed = true;\r\n  Vue.component(\"VueMe\", VueMe);\r\n};\r\n\r\n// Create module definition for Vue.use()\r\nconst plugin = {\r\n  install,\r\n};\r\n\r\n// To auto-install when vue is found\r\n// eslint-disable-next-line no-redeclare\r\n/* global window, global */\r\nlet GlobalVue = null;\r\nif (typeof window !== \"undefined\") {\r\n  GlobalVue = window.Vue;\r\n} else if (typeof global !== \"undefined\") {\r\n  GlobalVue = global.Vue;\r\n}\r\nif (GlobalVue) {\r\n  GlobalVue.use(plugin);\r\n}\r\n\r\n// Inject install function into component - allows component\r\n// to be registered via Vue.use() as well as Vue.component()\r\nVueMe.install = install;\r\n\r\n// Export component by default\r\nexport default VueMe;\r\nexport { VueMe };\r\n// It's possible to expose named exports when writing components that can\r\n// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';\r\n// export const RollupDemoDirective = component;\r\n"],"names":["install","installVueMe","Vue","installed","component","VueMe","plugin","GlobalVue","window","global","use"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;;;;;;;CAAA;AAiBA;;EAAA;AAaA;;EAAA;AAcA,wDAAA;AAGA;;;;;;EAAA;AAkBA,gEAAA;AAQA,uDAAA;AACA,+DAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9GA,AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAGA,IAAMA,OAAO,GAAG,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACzC,MAAIF,OAAO,CAACG,SAAZ,EAAuB;AACvBH,EAAAA,OAAO,CAACG,SAAR,GAAoB,IAApB;AACAD,EAAAA,GAAG,CAACE,SAAJ,CAAc,OAAd,EAAuBC,iBAAvB;AACD,CAJD;;;AAOA,IAAMC,MAAM,GAAG;AACbN,EAAAA,OAAO,EAAPA;AADa,CAAf;AAKA;;AACA;;AACA,IAAIO,SAAS,GAAG,IAAhB;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCD,EAAAA,SAAS,GAAGC,MAAM,CAACN,GAAnB;AACD,CAFD,MAEO,IAAI,OAAOO,MAAP,KAAkB,WAAtB,EAAmC;AACxCF,EAAAA,SAAS,GAAGE,MAAM,CAACP,GAAnB;AACD;;AACD,IAAIK,SAAJ,EAAe;AACbA,EAAAA,SAAS,CAACG,GAAV,CAAcJ,MAAd;AACD;AAGD;;;AACAD,iBAAK,CAACL,OAAN,GAAgBA,OAAhB;AAMA;AACA;;;;;"}