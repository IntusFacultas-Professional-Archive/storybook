import IFCTagEditor from '@Components/TagEditor/IFCTagEditor.vue';
import { IFCThemeProvider } from '@Components/ThemeProvider/IFCThemeProvider.vue';

/**
 * Next line disabled because this is not production code. this is development code.
 * So importing from devDeps is fine
 */
/* eslint-disable-next-line import/no-extraneous-dependencies */
import { action } from '@storybook/addon-actions';
import { propGenerator } from '../../mixinPropGenerator.js';

export default {
  title: 'Container Components/Form Components/Tag Editor',
  component: IFCTagEditor,
  parameters: {
    jest: ['IFCTagEditor.spec.js'],
    docs: {
      description: {
        component: 'This input component provides an input for creating a list of comma seperated value.',
      },
    },
  },
  argTypes: {
    ...propGenerator(IFCTagEditor, {
      dark: 'Whether dark mode is enabled',
    }),
    dark: {
      control: {
        type: 'boolean',
        default: false,
      },
    },
    label: {
      description: 'Slot for inserting HTML content into the label',
    },
    microcopy: {
      description: `Slot for inserting HTML content as help text, or error messages, under the input.
        This defaults to autogenerated helper text based on certain prop states like minlength, maxlength, etc.`,
    },
  },
};
const EXCLUDED_KEYS = ['dark', 'label', 'microcopy'];
const CodeFactory = (args) => `
<IFCThemeProvider :dark="${args.dark ?? false}">
  <IFCTagEditor
   ${Object.entries(args).filter(
    ([key]) => !EXCLUDED_KEYS.includes(key),
  ).map(([key, value]) => `${`${typeof value !== 'string' ? ':' : ''}${key}`}="${value}"\n`).join('   ')}  >
    <template v-slot:label>
      ${args.label ?? '<!-- Label Content Here -->'}
    </template>
    <template v-slot:microcopy>
      ${args.microcopy ?? '<!-- Microcopy Content Here -->'}
    </template>
    <template v-slot:endcap>
        ${args.endcap ?? '<!-- Endcap Content Here -->'}
    </template>
    <template v-slot:front-endcap>
        ${args['front-endcap'] ?? '<!-- Front Endcap Content Here -->'}
    </template>
  </IFCTagEditor>
</IFCThemeProvider>
`;

const Template = (args, { argTypes }) => ({
  props: Object.keys(argTypes),
  components: { IFCTagEditor, IFCThemeProvider },
  data() {
    return {
      internalValue: args.value,
    };
  },
  methods: {
    onFocus: action('@focus'),
    onBlur: action('@blur'),
    onChange: action('@change'),
  },
  template: `
  <IFCThemeProvider :dark="dark">
    <IFCTagEditor
      @focus="onFocus"
      @blur="onBlur"
      @change="onChange($event); internalValue = $event"
      :value="internalValue"
      v-bind="$props" >
      <template #label>
        {{label}}
      </template>
      <template #microcopy>
        {{microcopy}}
      </template>
    </IFCTagEditor>
  </IFCThemeProvider>
  `,
});

export const Default = Template.bind({});
Default.args = {
  name: 'textInput',
  label: 'Text Input',
  value: [],
};
Default.parameters = {
  docs: {
    source: {
      code: CodeFactory(Default.args),
    },
  },
};
