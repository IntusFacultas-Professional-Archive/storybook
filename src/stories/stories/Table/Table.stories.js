import IFCTable from '@Components/Table/IFCTable.vue';
import { IFCForm } from '@Components/Form/IFCForm.vue';

import { IFCParagraph } from '@Components/Text/IFCParagraph';
import { IFCH1 } from '@Components/Text/IFCH1';

/**
 * Next line disabled because this is not production code. this is development code.
 * So importing from devDeps is fine
 */
/* eslint-disable-next-line import/no-extraneous-dependencies */
import { action } from '@storybook/addon-actions';
import { IFCThemeProvider } from '@Components/ThemeProvider/IFCThemeProvider.vue';

export default {
  title: 'Presentational Components/Table/Table',
  component: IFCTable,
  parameters: {
    jest: ['IFCTable.spec.js'],
    backgrounds: {},
    docs: {
      description: {
        component: 'Configurable Data Table',
      },
    },
  },
  argTypes: {
    dark: {
      control: {
        type: 'boolean',
        default: false,
      },
    },
    sizing: {
      control: {
        type: 'select',
        options: ['condensed', 'regular', 'relaxed'],
      },
    },
    filters: {
      description: 'This slot is for adding filters to the the filter modal',
    },
    sizeChange: {
      description:
        'this event fires when the user selects a different sizing for the table.',
    },
    pageChange: {
      description: `When a user selects a new page from the pagination component,
       this will fire with the selected page`,
    },
    action: {
      description:
        'When a user selects an action for a row. Will include the system for that row',
    },
    click: {
      description: `When a user clicks on an interactive cell, this will fire with that cell\'s key 
      (and if not a header: system)`,
    },
    hover: {
      description: `When a user hovers on an interactive cell, this will fire with that cell's
       key (and if not a header: system`,
    },
    sort: {
      description: `When a user clicks on a table header sorter, this will fire 
      with \`{key: KeyOfheader, sortDirection: currentSortDirection}\``,
    },
    pageSize: {
      description:
        'When a user selects a new page size for pagination, this will fire with the page size selected.',
    },
    headers: {
      description:
        'Here you can completely override the `<thead>` element, replacing all its children.',
    },
    header: {
      description: `Here you can customizze what each of the autogenerated headers show. The text and key are provided
      as slot props`,
    },
    cell: {
      description: `Here you can customize what each of the autogenerated cells show for each system. The system,
      as well as the current column key are provided as slot props.`,
    },
    body: {
      description:
        'Here you can completely override the `<tbody>`, replacing all its children',
    },
    title: {
      description: 'Here you can completely override the table title',
    },
    configuration: {
      description:
        'Here you can completely override the table filters and configuration buttons and functionality',
    },
  },
};

const EXCLUDED_KEYS = [
  'dark',
  'default',
  'headers',
  'header',
  'body',
  'cell',
  'filters',
  'activeFilters',
];

const CodeFactory = (args) => `
  <IFCThemeProvider :dark="${args.dark ?? false}">
    <IFCTable
    ${Object.entries(args)
    .filter(([key]) => !EXCLUDED_KEYS.includes(key))
    .map(
      ([key, value]) => `${`${typeof value !== 'string' ? ':' : ''}${key}`}=${
        Array.isArray(value) || typeof value === 'object' ? "'" : '"'
      }${
        Array.isArray(value) || typeof value === 'object'
          ? JSON.stringify(value)
          : value
      }${Array.isArray(value) || typeof value === 'object' ? "'" : '"'}\n`,
    )
    .join('   ')}>
      <template v-slot:title>
        ${args.title ?? '<!-- Override Title Here -->'}
      </template>
      <template v-slot:filters>
        ${args.filters ?? '<!-- Add Filters Here -->'}
      </template>
      <template v-slot:activeFilters>
        ${args.activeFilters ?? '<!-- Add Active Filter Indicators Here -->'}
      </template>
      <template v-slot:headers>
        ${args.headers ?? '<!-- Override all the headers here -->'}
      </template>
      <template v-slot:header="{column}">
        ${args.header
          ?? '<!-- Override the contents of the autogenerated headers here -->'}
      </template>
      <template v-slot:cell="{item, key}">
        ${args.cell
          ?? `
          <!-- Override the contents of the autogenerated cells here.
          item is the currently iterated item. Key is the current column -->`}
      </template>
      <template v-slot:body>
        ${args.body
          ?? `
          <!-- Override the entire tbody here (goes inside the tbody) -->`}
      </template>
    </IFCTable>
  </IFCThemeProvider>
`;

const Template = (args, { argTypes }) => ({
  props: Object.keys(argTypes),
  components: {
    IFCTable,
    IFCThemeProvider,
    IFCParametricFilter,
    IFCNumericFilter,
    IFCForm,
    IFCParagraph,
    IFCH1,
  },
  methods: {
    onAction: action('@action'),
    onClick: action('@click'),
    onHover: action('@hover'),
    onSizing: action('@sizeChange'),
    onSort: action('@sort'),
    onPageSize: action('@pageSize'),
    onPageChange: action('@pageChange'),
  },
  template: `
    <IFCThemeProvider :dark="dark">
      <IFCTable
        @action="onAction"
        @click="onClick"
        @hover="onHover"
        @sizeChange="onSizing"
        @sort="onSort"
        @pageSize="onPageSize"
        @pageChange="onPageChange"
        v-bind="$props">
        <template v-slot:title>
          ${args.title ?? '<IFCH1>Table Title Here</IFCH1>'}
        </template>
        <template v-slot:filters>
          ${args.filters ?? ''}
        </template>
        <template v-slot:activeFilters>
          ${args.activeFilters ?? ''}
        </template>
      </IFCTable>
    </IFCThemeProvider>
  `,
});

const systems = [
  {
    identifier: 'Some Identifier',
    snake_case_key: 'Some value',
    'Title Case Key': 'Some third value',
  },
  {
    snake_case_key: 'Some other value',
    camelCaseKey: 'Some other other value',
    'Title Case Key': 'Some third value',
  },
  {
    identifier: 'Some Identifier1',
    snake_case_key: 'Some value1',
    camelCaseKey: 'Some other value1',
    'Title Case Key': 'Some third value',
  },
  {
    identifier: 'Some Identifier2',
    snake_case_key: 'Some value2',
    'Title Case Key': 'Some third value',
  },
  {
    identifier: 'Some Identifier3',
    snake_case_key: 'Some value3',
    camelCaseKey: 'Some other value3',
    'Title Case Key': 'Some third value',
  },
];

export const AutogeneratedContent = Template.bind({});
AutogeneratedContent.args = {
  items: systems,
  sizing: 'regular',
};
AutogeneratedContent.parameters = {
  docs: {
    source: {
      code: CodeFactory(AutogeneratedContent.args),
    },
  },
};

export const DarkMode = Template.bind({});
DarkMode.args = {
  items: systems,
  sizing: 'regular',
  dark: true,
};
DarkMode.parameters = {
  backgrounds: {
    default: 'Dark Mode',
  },
  docs: {
    source: {
      code: CodeFactory(DarkMode.args),
    },
  },
};

export const AutogeneratedContentWithActions = Template.bind({});
AutogeneratedContentWithActions.args = {
  items: systems,
  sizing: 'regular',
  actions: ['View System Page', 'View Gallery'],
  showActions: true,
};
AutogeneratedContentWithActions.parameters = {
  docs: {
    source: {
      code: CodeFactory(AutogeneratedContentWithActions.args),
    },
  },
};

const SlotTemplate = (args, { argTypes }) => ({
  props: Object.keys(argTypes),
  components: {
    IFCTable,
    IFCThemeProvider,
    IFCParagraph,
    IFCH1,
  },
  methods: {
    onAction: action('@action'),
    onClick: action('@click'),
    onHover: action('@hover'),
    onSizing: action('@sizing'),
    onSort: action('@sort'),
  },
  template: `
    <IFCThemeProvider>
      <IFCTable
        @action="onAction"
        @click="onClick"
        @hover="onHover"
        @sizing="onSizing"
        @sort="onSort"
        v-bind="$props">
        <template v-slot:title>
          <IFCH1 style="font-family: Segoe UI, sans-serif">Table Title Here</IFCH1>
        </template>
        <template #headers>
          ${args.headers ?? ''}
        </template>
        <template #header="{column}">
          <IFCParagraph>I overrode this and am displaying the passed slotProps!</IFCParagraph>
          {{column}}
        </template>
        <template #cell="{item, key}">
          <IFCParagraph>I overrode this and am displaying the passed slotProps!</IFCParagraph>
          {{item}} {{key}}
        </template>
        <template #body>
          ${args.body ?? ''}
        </template>
      </IFCTable>
    </IFCThemeProvider>
  `,
});

export const OverridenCellsAndHeaders = SlotTemplate.bind({});
OverridenCellsAndHeaders.args = {
  items: systems,
  sizing: 'regular',
};
OverridenCellsAndHeaders.parameters = {
  docs: {
    source: {
      code: CodeFactory(OverridenCellsAndHeaders.args),
    },
  },
};

export const OverridenTheadAndTbody = SlotTemplate.bind({});
OverridenTheadAndTbody.args = {
  items: systems,
  sizing: 'regular',
  headers: "<IFCH1>I'm fully overriden!</IFCH1>",
  body: '<IFCH1>So am I!</IFCH1>',
};
OverridenTheadAndTbody.parameters = {
  docs: {
    source: {
      code: CodeFactory(OverridenTheadAndTbody.args),
    },
  },
};
